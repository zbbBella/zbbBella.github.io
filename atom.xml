<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bella</title>
  
  <subtitle>收集人生成就中</subtitle>
  <link href="https://www.bebella.cc/atom.xml" rel="self"/>
  
  <link href="https://www.bebella.cc/"/>
  <updated>2024-01-26T09:16:35.101Z</updated>
  <id>https://www.bebella.cc/</id>
  
  <author>
    <name>Bella</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SQL基础</title>
    <link href="https://www.bebella.cc/2024/01/15/SQL%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.bebella.cc/2024/01/15/SQL%E5%AD%A6%E4%B9%A0/</id>
    <published>2024-01-15T11:13:52.000Z</published>
    <updated>2024-01-26T09:16:35.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SQL基础"><a href="#SQL基础" class="headerlink" title="SQL基础"></a>SQL基础</h1><h2 id="1-数据库简介"><a href="#1-数据库简介" class="headerlink" title="1. 数据库简介"></a>1. 数据库简介</h2><p>数据库是将大量数据保存起来，通过计算机加工而成的可以进行高效访问的数据集合。该数据集合称为数据库（Database，DB）。用来管理数据库的计算机系统称为数据库管理系统（Database Management System，DBMS）。</p><h3 id="1-1-DMBS"><a href="#1-1-DMBS" class="headerlink" title="1.1 DMBS"></a>1.1 DMBS</h3><h4 id="1-1-1-DBMS种类"><a href="#1-1-1-DBMS种类" class="headerlink" title="1.1.1   DBMS种类"></a>1.1.1   DBMS种类</h4><p>DBMS 主要通过数据的保存格式（数据库的种类）来进行分类，现阶段主要有以下 5 种类型.</p><ul><li><p>层次数据库（Hierarchical Database，HDB）</p></li><li><p>关系数据库（Relational Database，RDB）</p><ul><li>Oracle Database：甲骨文公司的 RDBMS</li><li>SQL Server：微软公司的 RDBMS</li><li>DB2：IBM公司的 RDBMS</li><li>PostgreSQL：开源的 RDBMS</li><li>MySQL：开源的 RDBMS</li></ul><p>如上是5种具有代表性的 RDBMS，其特点是由行和列组成的二维表来管理数据，这种类型的 DBMS 称为关系数据库管理系统（Relational Database Management System，RDBMS）。</p></li><li><p>面向对象数据库（Object Oriented Database，OODB）</p></li><li><p>XML数据库（XML Database，XMLDB）</p></li><li><p>键值存储系统（Key-Value Store，KVS），举例：MongoDB</p></li></ul><h4 id="1-1-2-RDBMS-常见结构"><a href="#1-1-2-RDBMS-常见结构" class="headerlink" title="1.1.2 RDBMS  常见结构"></a>1.1.2 RDBMS  常见结构</h4><p>最常见的是是客户端 &#x2F; 服务器类型（C&#x2F;S类型）</p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/15/192912-236011.png" alt="image-20240115192911499"></p><h3 id="1-2-初识SQL"><a href="#1-2-初识SQL" class="headerlink" title="1.2  初识SQL"></a>1.2  初识SQL</h3><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/15/193557-158279.png" alt="image-20240115193557157"></p><p>SQL 语句可分为3类：</p><ul><li><strong>DDL</strong> ：DDL（Data Definition Language，数据定义语言） 用来创建或者删除存储数据用的数据库以及数据库中的表等对象。DDL 包含以下几种指令。<ul><li>CREATE ： 创建数据库和表等对象</li><li>DROP ： 删除数据库和表等对象</li><li>ALTER ： 修改数据库和表等对象的结构</li></ul></li><li><strong>DML</strong> :DML（Data Manipulation Language，数据操纵语言） 用来查询或者变更表中的记录。DML 包含以下几种指令。<ul><li>SELECT ：查询表中的数据</li><li>INSERT ：向表中插入新数据</li><li>UPDATE ：更新表中的数据</li><li>DELETE ：删除表中的数据</li></ul></li><li><strong>DCL</strong> ：DCL（Data Control Language，数据控制语言） 用来确认或者取消对数据库中的数据进行的变更。除此之外，还可以对 RDBMS 的用户是否有权限操作数据库中的对象（数据库表等）进行设定。DCL 包含以下几种指令。<ul><li>COMMIT ： 确认对数据库中的数据进行的变更</li><li>ROLLBACK ： 取消对数据库中的数据进行的变更</li><li>GRANT ： 赋予用户操作权限</li><li>REVOKE ： 取消用户的操作权限</li></ul></li></ul><p>实际使用的 SQL 语句当中有 90% 属于 DML</p><h4 id="1-2-1-SQL的基本书写规则"><a href="#1-2-1-SQL的基本书写规则" class="headerlink" title="1.2.1 SQL的基本书写规则"></a>1.2.1 SQL的基本书写规则</h4><ul><li>SQL语句要以分号（ ; ）结尾</li><li>SQL 不区分关键字的大小写，但是插入到表中的数据是区分大小写的</li><li>win 系统默认不区分表名及字段名的大小写</li><li>linux &#x2F; mac 默认严格区分表名及字段名的大小写</li><li>常数的书写方式是固定的</li></ul><p><code>&#39;abc&#39;</code>, <code>1234</code>, <code>&#39;26 Jan 2010&#39;</code>, <code>&#39;10/01/26&#39;</code>, <code>&#39;2010-01-26&#39;</code>……</p><ul><li>单词需要用半角空格或者换行来分隔</li></ul><p>SQL 语句的单词之间需使用<strong>半角空格或换行符来进行分隔</strong>，且不能使用全角空格作为单词的分隔符，否则会发生错误，出现无法预期的结果。</p><h4 id="1-2-2-命名规则"><a href="#1-2-2-命名规则" class="headerlink" title="1.2.2 命名规则"></a>1.2.2 命名规则</h4><ul><li>只能使用半角英文字母、数字、下划线（_）作为数据库、表和列的名称</li><li>名称必须以半角英文字母开头</li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/15/194619-408451.png" alt="image-20240115194618415"></p><h4 id="1-2-5-数据类型"><a href="#1-2-5-数据类型" class="headerlink" title="1.2.5 数据类型"></a>1.2.5 数据类型</h4><p>数据库创建的表，所有的列都必须指定数据类型，每一列都不能存储与该列数据类型不符的数据。四种最基本的数据类型</p><ul><li>INTEGER 型</li></ul><p>用来指定存储整数的列的数据类型（数字型），不能存储小数。</p><ul><li>CHAR 型</li></ul><p>用来存储定长字符串，当列中存储的字符串长度达不到最大长度的时候，使用半角空格进行补足，由于会浪费存储空间，所以一般不使用。</p><ul><li>VARCHAR 型</li></ul><p>用来存储可变长度字符串，定长字符串在字符数未达到最大长度时会用半角空格补足，但可变长字符串不同，即使字符数未达到最大长度，也不会用半角空格补足。</p><ul><li>DATE 型</li></ul><p>用来指定存储日期（年月日）的列的数据类型（日期型）。</p><h4 id="1-2-6-设置约束"><a href="#1-2-6-设置约束" class="headerlink" title="1.2.6 设置约束"></a>1.2.6 设置约束</h4><p>约束是除了数据类型之外，对列中存储的数据进行限制或者追加条件的功能。</p><p><code>NOT NULL</code>是非空约束，即该列必须输入数据。</p><p><code>PRIMARY KEY</code>是主键约束，代表该列是唯一值，可以通过该列取出特定的行的数据。</p><h4 id="1-2-7-注释语句"><a href="#1-2-7-注释语句" class="headerlink" title="1.2.7 注释语句"></a>1.2.7 注释语句</h4><p>注释是SQL语句中用来标识说明或者注意事项的部分。分为1行注释”– “和多行注释两种”&#x2F;* *&#x2F;“。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 一行</span></span><br><span class="line"><span class="comment">/* 多行 </span></span><br><span class="line"><span class="comment">多行 </span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h3 id="1-3-SQL-基础语句"><a href="#1-3-SQL-基础语句" class="headerlink" title="1.3 SQL 基础语句"></a>1.3 SQL 基础语句</h3><h4 id="1-3-1-创建数据库"><a href="#1-3-1-创建数据库" class="headerlink" title="1.3.1 创建数据库"></a>1.3.1 创建数据库</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE <span class="operator">&lt;</span>数据库名字<span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">/* 本例 */</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE shop;</span><br></pre></td></tr></table></figure><h4 id="1-3-2-创建表"><a href="#1-3-2-创建表" class="headerlink" title="1.3.2 创建表"></a>1.3.2 创建表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span></span><br><span class="line">( <span class="operator">&lt;</span> 列名 <span class="number">1</span><span class="operator">&gt;</span> <span class="operator">&lt;</span> 数据类型 <span class="operator">&gt;</span> <span class="operator">&lt;</span> 该列所需约束 <span class="operator">&gt;</span> ,</span><br><span class="line">  <span class="operator">&lt;</span> 列名 <span class="number">2</span><span class="operator">&gt;</span> <span class="operator">&lt;</span> 数据类型 <span class="operator">&gt;</span> <span class="operator">&lt;</span> 该列所需约束 <span class="operator">&gt;</span> ,</span><br><span class="line">  <span class="operator">&lt;</span> 列名 <span class="number">3</span><span class="operator">&gt;</span> <span class="operator">&lt;</span> 数据类型 <span class="operator">&gt;</span> <span class="operator">&lt;</span> 该列所需约束 <span class="operator">&gt;</span> ,</span><br><span class="line">  <span class="operator">&lt;</span> 列名 <span class="number">4</span><span class="operator">&gt;</span> <span class="operator">&lt;</span> 数据类型 <span class="operator">&gt;</span> <span class="operator">&lt;</span> 该列所需约束 <span class="operator">&gt;</span> ,</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  .</span><br><span class="line">  <span class="operator">&lt;</span> 该表的约束 <span class="number">1</span><span class="operator">&gt;</span> , <span class="operator">&lt;</span> 该表的约束 <span class="number">2</span><span class="operator">&gt;</span> ,……);</span><br><span class="line">  <span class="comment">/* 本例 */</span></span><br><span class="line">  <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> product</span><br><span class="line">(product_id <span class="type">CHAR</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> product_name <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> product_type <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> sale_price <span class="type">INTEGER</span> ,</span><br><span class="line"> purchase_price <span class="type">INTEGER</span> ,</span><br><span class="line"> regist_date <span class="type">DATE</span> ,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (product_id));</span><br></pre></td></tr></table></figure><h4 id="1-3-3-表的删除与更新"><a href="#1-3-3-表的删除与更新" class="headerlink" title="1.3.3 表的删除与更新"></a>1.3.3 表的删除与更新</h4><ul><li>删除</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> ;</span><br></pre></td></tr></table></figure><ul><li>添加、删除列</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 添加 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span> 列的定义 <span class="operator">&gt;</span>;</span><br><span class="line"><span class="comment">/* 删除 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> <span class="operator">&lt;</span> 表名 <span class="operator">&gt;</span> <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> <span class="operator">&lt;</span> 列名 <span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><ul><li>删除表中特定行</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 一定注意添加 WHERE 条件，否则将会删除所有的数据</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> product <span class="keyword">WHERE</span> COLUMN_NAME<span class="operator">=</span><span class="string">&#x27;XXX&#x27;</span>;</span><br></pre></td></tr></table></figure><p>ALTER TABLE 语句和 DROP TABLE 语句一样，执行之后无法恢复。误添加的列可以通过 ALTER TABLE 语句删除，或者将表全部删除之后重新再创建。</p><ul><li>清空表</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">TRUNCATE</span> <span class="keyword">TABLE</span> TABLE_NAME;</span><br></pre></td></tr></table></figure><p>优点：相比<code>drop / delete</code>，<code>truncate</code>用来清除数据时，速度最快。</p><p> 例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除product表 */</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> product;</span><br><span class="line"><span class="comment">/* 添加一列可以存储100位的可变长字符串的 product_name_pinyin 列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> product_name_pinyin <span class="type">VARCHAR</span>(<span class="number">100</span>);</span><br><span class="line"><span class="comment">/* 删除 product_name_pinyin 列 */</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> product <span class="keyword">DROP</span> <span class="keyword">COLUMN</span> product_name_pinyin;</span><br></pre></td></tr></table></figure><ul><li>更新数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 单个数据更新 */</span></span><br><span class="line"><span class="keyword">UPDATE</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line">   <span class="keyword">SET</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span> <span class="operator">=</span> <span class="operator">&lt;</span>表达式<span class="operator">&gt;</span> [, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;=</span><span class="operator">&lt;</span>表达式<span class="number">2</span><span class="operator">&gt;</span>...]  </span><br><span class="line"> <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件<span class="operator">&gt;</span>  <span class="comment">-- optional，非常重要。否则将会将所有的行按照语句修改</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> 子句  <span class="comment">-- optional </span></span><br><span class="line"> LIMIT 子句; <span class="comment">-- optional</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* 多列数据更新 */</span></span><br><span class="line"><span class="comment">-- UPDATE 语句的 SET 子句支持同时将多个列作为更新对象。</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 修改所有的注册时间</span></span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line">   <span class="keyword">SET</span> regist_date <span class="operator">=</span> <span class="string">&#x27;2009-10-10&#x27;</span>;  </span><br><span class="line"><span class="comment">-- 仅修改部分商品的单价</span></span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line">   <span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">*</span> <span class="number">10</span></span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;厨房用具&#x27;</span>;  </span><br><span class="line"> </span><br><span class="line"> <span class="comment">-- 基础写法，一条UPDATE语句只更新一列</span></span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line">   <span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">*</span> <span class="number">10</span></span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;厨房用具&#x27;</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line">   <span class="keyword">SET</span> purchase_price <span class="operator">=</span> purchase_price <span class="operator">/</span> <span class="number">2</span></span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;厨房用具&#x27;</span>;  </span><br><span class="line"> <span class="comment">-- 合并版</span></span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line">   <span class="keyword">SET</span> sale_price <span class="operator">=</span> sale_price <span class="operator">*</span> <span class="number">10</span>,</span><br><span class="line">       purchase_price <span class="operator">=</span> purchase_price <span class="operator">/</span> <span class="number">2</span></span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;厨房用具&#x27;</span>;  </span><br></pre></td></tr></table></figure><ul><li>NULL清空</li></ul><p>将列更新为NULL（可作为一个值使用）。</p><p>只有未设置 NOT NULL 约束和主键约束的列才可以清空为NULL。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将商品编号为0008的数据（圆珠笔）的登记日期更新为NULL  </span></span><br><span class="line"><span class="keyword">UPDATE</span> product</span><br><span class="line">   <span class="keyword">SET</span> regist_date <span class="operator">=</span> <span class="keyword">NULL</span></span><br><span class="line"> <span class="keyword">WHERE</span> product_id <span class="operator">=</span> <span class="string">&#x27;0008&#x27;</span>;  </span><br></pre></td></tr></table></figure><h4 id="1-3-4-插入"><a href="#1-3-4-插入" class="headerlink" title="1.3.4 插入"></a>1.3.4 插入</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span> (列<span class="number">1</span>, 列<span class="number">2</span>, 列<span class="number">3</span>, ……) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>, 值<span class="number">3</span>, ……);  </span><br></pre></td></tr></table></figure><p>对表进行全列 INSERT 时，可以省略表名后的列清单。这时 VALUES子句的值会默认按照从左到右的顺序赋给每一列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 包含列清单</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins (product_id, product_name, product_type, sale_price, purchase_price, regist_date) <span class="keyword">VALUES</span> (<span class="string">&#x27;0005&#x27;</span>, <span class="string">&#x27;高压锅&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">6800</span>, <span class="number">5000</span>, <span class="string">&#x27;2009-01-15&#x27;</span>);</span><br><span class="line"><span class="comment">-- 省略列清单</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0005&#x27;</span>, <span class="string">&#x27;高压锅&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">6800</span>, <span class="number">5000</span>, <span class="string">&#x27;2009-01-15&#x27;</span>);  </span><br></pre></td></tr></table></figure><p>原则上，执行一次 INSERT 语句会插入一行数据。插入多行时，通常需要循环执行相应次数的 INSERT 语句。其实很多 RDBMS 都支持一次插入多行数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通常的INSERT</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0002&#x27;</span>, <span class="string">&#x27;打孔器&#x27;</span>, <span class="string">&#x27;办公用品&#x27;</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">&#x27;2009-09-11&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0003&#x27;</span>, <span class="string">&#x27;运动T恤&#x27;</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="keyword">NULL</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0004&#x27;</span>, <span class="string">&#x27;菜刀&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">&#x27;2009-09-20&#x27;</span>);</span><br><span class="line"><span class="comment">-- 多行INSERT （ DB2、SQL、SQL Server、 PostgreSQL 和 MySQL多行插入）</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0002&#x27;</span>, <span class="string">&#x27;打孔器&#x27;</span>, <span class="string">&#x27;办公用品&#x27;</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">&#x27;2009-09-11&#x27;</span>),</span><br><span class="line">                              (<span class="string">&#x27;0003&#x27;</span>, <span class="string">&#x27;运动T恤&#x27;</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="keyword">NULL</span>),</span><br><span class="line">                              (<span class="string">&#x27;0004&#x27;</span>, <span class="string">&#x27;菜刀&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">&#x27;2009-09-20&#x27;</span>);  </span><br><span class="line"><span class="comment">-- Oracle中的多行INSERT</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">ALL</span> <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0002&#x27;</span>, <span class="string">&#x27;打孔器&#x27;</span>, <span class="string">&#x27;办公用品&#x27;</span>, <span class="number">500</span>, <span class="number">320</span>, <span class="string">&#x27;2009-09-11&#x27;</span>)</span><br><span class="line">           <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0003&#x27;</span>, <span class="string">&#x27;运动T恤&#x27;</span>, <span class="string">&#x27;衣服&#x27;</span>, <span class="number">4000</span>, <span class="number">2800</span>, <span class="keyword">NULL</span>)</span><br><span class="line">           <span class="keyword">INTO</span> productins <span class="keyword">VALUES</span> (<span class="string">&#x27;0004&#x27;</span>, <span class="string">&#x27;菜刀&#x27;</span>, <span class="string">&#x27;厨房用具&#x27;</span>, <span class="number">3000</span>, <span class="number">2800</span>, <span class="string">&#x27;2009-09-20&#x27;</span>)</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> DUAL;  </span><br><span class="line"><span class="comment">-- DUAL是Oracle特有（安装时的必选项）的一种临时表A。因此“SELECT *FROM DUAL” 部分也只是临时性的，并没有实际意义。  </span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>INSERT</code>复制其他表的数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将商品表中的数据复制到商品复制表中</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> productcopy (product_id, product_name, product_type, sale_price, purchase_price, regist_date)</span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, product_type, sale_price, purchase_price, regist_date</span><br><span class="line">  <span class="keyword">FROM</span> Product;  </span><br></pre></td></tr></table></figure><h3 id="1-4-索引"><a href="#1-4-索引" class="headerlink" title="1.4  索引"></a>1.4  索引</h3><p>作用：可以大大提高MySQL的检索速度。索引创建了一种有序的数据结构，采用二分法搜索数据时，其复杂度为 <img src="http://latex.codecogs.com/svg.latex?log_2(N)" alt="1"> ，1000多万的数据只要搜索23次，其效率是非常高效的。</p><ul><li>创建索引</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> mytable(  </span><br><span class="line">ID <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,   </span><br><span class="line">username <span class="type">VARCHAR</span>(<span class="number">16</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,  </span><br><span class="line">INDEX [indexName] (username(length))  </span><br><span class="line">);  </span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法1</span></span><br><span class="line"><span class="keyword">CREATE</span> INDEX indexName <span class="keyword">ON</span> table_name (column_name)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 方法2</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">table</span> tableName <span class="keyword">ADD</span> INDEX indexName(columnName)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>索引分类</p><ul><li><p>主键索引</p><ul><li>建立在主键上的索引被称为主键索引</li><li>一张数据表只能有一个主键索引</li><li>索引列值不允许有空值，通常在创建表时一起创建。</li></ul></li><li><p>唯一索引</p><ul><li>建立在<code>UNIQUE</code>字段上的索引被称为唯一索引</li><li>一张表可以有多个唯一索引</li><li>索引列值允许为空，列值中出现多个空值不会发生重复冲突。</li></ul></li><li><p>普通索引</p><ul><li>建立在普通字段上的索引被称为普通索引。</li></ul></li><li><p>前缀索引</p><ul><li>前缀索引是指对字符类型字段的前几个字符或对二进制类型字段的前几个bytes建立的索引，而不是在整个字段上建索引。</li><li>前缀索引可以建立在类型为char、varchar、binary、varbinary的列上，可以大大减少索引占用的存储空间，也能提升索引的查询效率。</li></ul></li><li><p>全文索引</p><ul><li><p>利用“分词技术”实现在长文本中搜索关键字的一种索引。</p><p>语法：<code>SELECT * FROM article WHERE MATCH (col1，col2，...) AGAINST (expr [ search _ modifier ])</code></p><p>1、MySQL 5.6 以前的版本，只有 MyISAM 存储引擎支持全文索引；</p><p>2、MySQL 5.6 及以后的版本，MyISAM 和 InnoDB 存储引擎均支持全文索引;</p><p>3、只有字段的数据类型为 char、varchar、text 及其系列才可以建全文索引。</p><p>4、如果可能，请尽量先创建表并插入所有数据后再创建全文索引，而不要在创建表时就直接创建全文索引，因为前者比后者的全文索引效率要高。</p></li></ul></li><li><p>单列索引</p><ul><li>建立在单个列上的索引被称为单列索引。</li></ul></li><li><p>联合索引（复合索引、多列索引）</p><ul><li>建立在多个列上的索引被称为联合索引，又叫复合索引、组合索引。</li></ul></li></ul></li></ul><h2 id="2-基础查询与排序"><a href="#2-基础查询与排序" class="headerlink" title="2. 基础查询与排序"></a>2. 基础查询与排序</h2><h3 id="2-1-SELECT-语句"><a href="#2-1-SELECT-语句" class="headerlink" title="2.1 SELECT 语句"></a>2.1 SELECT 语句</h3><ul><li>从表中选数据</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 从表中选数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>, </span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>;</span><br><span class="line">  </span><br><span class="line"><span class="comment">-- 从表中选符合条件的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="operator">&gt;</span>, ……</span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">WHERE</span> <span class="operator">&lt;</span>条件表达式<span class="operator">&gt;</span>;</span><br></pre></td></tr></table></figure><p>其中，SELECT子句中列举了希望从表中查询出的列的名称，而FROM子句则指定了选取出数据的表的名称。在WHERE 子句中可以指定“某一列的值和这个字符串相等”或者“某一列的值大于这个数字”等条件。执行含有这些条件的SELECT语句，就可以查询出只符合该条件的记录了。</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 用来选取product type列为衣服的记录的SELECT语句</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, product_type</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;衣服&#x27;</span>;</span><br><span class="line"><span class="comment">-- 也可以选取出不是查询条件的列（条件列与输出列不同）</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;衣服&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/175507-157149.png" alt="image-20240117175500706"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/175513-54096.png" alt="image-20240117175509292"></p><h4 id="2-1-1-相关法则"><a href="#2-1-1-相关法则" class="headerlink" title="2.1.1 相关法则"></a>2.1.1 相关法则</h4><ul><li>星号（*）代表全部列的意思。</li><li>SQL中可以随意使用换行符，不影响语句执行（但不可插入空行）。</li><li>设定汉语别名时需要使用双引号（”）括起来。</li><li>在SELECT语句中使用DISTINCT可以删除重复行。</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 想要查询出全部列时，可以使用代表所有列的星号（*）。</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span>；</span><br><span class="line"><span class="comment">-- SQL语句可以使用AS关键字为列设定别名（用中文时需要双引号（“”））。</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id     <span class="keyword">As</span> id,</span><br><span class="line">       product_name   <span class="keyword">As</span> name,</span><br><span class="line">       purchase_price <span class="keyword">AS</span> &quot;进货单价&quot;</span><br><span class="line">  <span class="keyword">FROM</span> product;</span><br><span class="line"><span class="comment">-- 使用DISTINCT删除product_type列中重复的数据</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> product_type</span><br><span class="line">  <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/180308-835778.png" alt="image-20240117180304451"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/180321-19684.png" alt="image-20240117180314998"></p><ul><li>SELECT子句中可以使用常数或者表达式。</li><li>使用比较运算符时一定要注意不等号和等号的位置。</li><li>字符串类型的数据原则上按照字典顺序进行排序，不能与数字的大小顺序混淆。</li><li>希望选取NULL记录时，需要在条件表达式中使用IS NULL运算符。希望选取不是NULL的记录时，需要在条件表达式中使用IS NOT NULL运算符。</li></ul><h3 id="2-2-运算符"><a href="#2-2-运算符" class="headerlink" title="2.2  运算符"></a>2.2  运算符</h3><h4 id="2-2-1-算数运算符"><a href="#2-2-1-算数运算符" class="headerlink" title="2.2.1 算数运算符"></a>2.2.1 算数运算符</h4><p>SQL语句中可以使用的四则运算的主要运算符如下：</p><table><thead><tr><th align="left">含义</th><th align="left">运算符</th></tr></thead><tbody><tr><td align="left">加法</td><td align="left">+</td></tr><tr><td align="left">减法</td><td align="left">-</td></tr><tr><td align="left">乘法</td><td align="left">*</td></tr><tr><td align="left">除法</td><td align="left">&#x2F;</td></tr></tbody></table><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 选取出sale_price列为500的记录</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, product_type</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> sale_price <span class="operator">=</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/191237-474673.png" alt="image-20240117190839293"></p><h4 id="2-2-3-比较运算符"><a href="#2-2-3-比较运算符" class="headerlink" title="2.2.3 比较运算符"></a>2.2.3 比较运算符</h4><p>SQL常见比较运算符如下：</p><table><thead><tr><th align="left">运算符</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">&#x3D;</td><td align="left">和 ~ 相等</td></tr><tr><td align="left">&lt;&gt;</td><td align="left">和 ~ 不相等</td></tr><tr><td align="left">&gt;&#x3D;</td><td align="left">大于等于 ~</td></tr><tr><td align="left">&gt;</td><td align="left">大于 ~</td></tr><tr><td align="left">&lt;&#x3D;</td><td align="left">小于等于 ~</td></tr><tr><td align="left">&lt;</td><td align="left">小于 ~</td></tr></tbody></table><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- SQL语句中也可以使用运算表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, sale_price, sale_price <span class="operator">*</span> <span class="number">2</span> <span class="keyword">AS</span> &quot;sale_price x2&quot;</span><br><span class="line">  <span class="keyword">FROM</span> product;</span><br><span class="line"><span class="comment">-- WHERE子句的条件表达式中也可以使用计算表达式</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, sale_price, purchase_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> sale_price <span class="operator">-</span> purchase_price <span class="operator">&gt;=</span> <span class="number">500</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/191313-517736.png" alt="image-20240117191307665"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/191314-914853.png" alt="image-20240117191313859"></p><h4 id="2-2-3-逻辑运算符"><a href="#2-2-3-逻辑运算符" class="headerlink" title="2.2.3 逻辑运算符"></a>2.2.3 逻辑运算符</h4><ul><li>NOT</li></ul><p>想要表示 <code>不是……</code> 时，除了前文的&lt;&gt;运算符外，还存在另外一个表示否定、使用范围更广的运算符：NOT。NOT不能单独使用，必须和其他查询条件组合起来使用。</p><p><code>NOT sale_price &gt;= 1000</code> 与 <code>sale_price &lt; 1000</code> 是等价的。</p><ul><li>AND 与 OR</li></ul><p>AND：交集</p><p>OR：并集</p><p>注意：AND优先于OR</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 通过使用括号让OR运算符先于AND运算符执行</span></span><br><span class="line"><span class="keyword">SELECT</span> product_name, product_type, regist_date</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;办公用品&#x27;</span></span><br><span class="line">   <span class="keyword">AND</span> ( regist_date <span class="operator">=</span> <span class="string">&#x27;2009-09-11&#x27;</span></span><br><span class="line">        <span class="keyword">OR</span> regist_date <span class="operator">=</span> <span class="string">&#x27;2009-09-20&#x27;</span>);</span><br></pre></td></tr></table></figure><p>优先级：</p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/191831-773922.png" alt="image-20240117191830955"></p><h3 id="2-3-聚合查询"><a href="#2-3-聚合查询" class="headerlink" title="2.3  聚合查询"></a>2.3  聚合查询</h3><p>SQL中用于汇总的函数叫做聚合函数。</p><ul><li>SUM：计算表中某数值列中的合计值</li><li>AVG：计算表中某数值列中的平均值</li><li>MAX：计算表中任意列中数据的最大值，包括文本类型和数字类型</li><li>MIN：计算表中任意列中数据的最小值，包括文本类型和数字类型</li><li>COUNT：计算表中的记录条数（行数）</li><li>DISTINCT：删除重复值<ul><li>比如：要计算总共有几种咖啡类型在售，该怎么计算呢？</li><li>应用 COUNT 聚合函数之前，加上 <code>DISTINCT</code> 关键字就。</li></ul></li></ul><p>应用法则：</p><ul><li>COUNT 聚合函数运算结果与参数有关，COUNT(*) &#x2F; COUNT(1) 得到包含 NULL 值的所有行，COUNT(&lt;列名&gt;) 得到不包含 NULL 值的所有行。</li><li>聚合函数不处理包含 NULL 值的行，但是 COUNT(*) 除外。</li><li>MAX &#x2F; MIN 函数适用于文本类型和数字类型的列，而 SUM &#x2F; AVG 函数仅适用于数字类型的列。</li><li>在聚合函数的参数中使用 DISTINCT 关键字，可以得到删除重复值的聚合结果。</li></ul><h3 id="2-4-对表分组"><a href="#2-4-对表分组" class="headerlink" title="2.4 对表分组"></a>2.4 对表分组</h3><h4 id="2-4-1-GROUP-BY"><a href="#2-4-1-GROUP-BY" class="headerlink" title="2.4.1 GROUP BY"></a>2.4.1 GROUP BY</h4><p>将现有的数据按照某列来汇总统计</p><ul><li>GROUP BY</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>,<span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……;</span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 按照商品种类统计数据行数</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type;</span><br><span class="line"> <span class="comment">-- 不含GROUP BY</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/193825-979654.png" alt="image-20240117192824297"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/192847-946555.png" alt="image-20240117192830807"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 在WHERE子句中使用GROUP BY</span></span><br><span class="line"><span class="keyword">SELECT</span> purchase_price, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;衣服&#x27;</span></span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> purchase_price;</span><br></pre></td></tr></table></figure><h3 id="2-5-为聚合结果指定条件"><a href="#2-5-为聚合结果指定条件" class="headerlink" title="2.5 为聚合结果指定条件"></a>2.5 为聚合结果指定条件</h3><p>前面学习了如何得到分组聚合结果，那如何得到分组聚合结果的<strong>部分结果</strong>呢？</p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/193909-287720.png" alt="image-20240117193909206"></p><ul><li>HAVING</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 常数</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type</span><br><span class="line"><span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 错误形式（因为product_name不包含在GROUP BY聚合键中）</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type</span><br><span class="line"><span class="keyword">HAVING</span> product_name <span class="operator">=</span> <span class="string">&#x27;圆珠笔&#x27;</span>;</span><br></pre></td></tr></table></figure><h3 id="2-7-对查询结果排序"><a href="#2-7-对查询结果排序" class="headerlink" title="2.7 对查询结果排序"></a>2.7 对查询结果排序</h3><ul><li>ORDER BY</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">&lt;</span>列名<span class="number">1</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">2</span><span class="operator">&gt;</span>, <span class="operator">&lt;</span>列名<span class="number">3</span><span class="operator">&gt;</span>, ……</span><br><span class="line">  <span class="keyword">FROM</span> <span class="operator">&lt;</span>表名<span class="operator">&gt;</span></span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> <span class="operator">&lt;</span>排序基准列<span class="number">1</span><span class="operator">&gt;</span> [<span class="keyword">ASC</span>, <span class="keyword">DESC</span>], <span class="operator">&lt;</span>排序基准列<span class="number">2</span><span class="operator">&gt;</span> [<span class="keyword">ASC</span>, <span class="keyword">DESC</span>], ……</span><br><span class="line"> <span class="comment">-- ASC 升序（默认）</span></span><br><span class="line"> <span class="comment">-- DESC 降序</span></span><br></pre></td></tr></table></figure><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 降序排列</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price, purchase_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sale_price <span class="keyword">DESC</span>;</span><br><span class="line"> <span class="comment">-- 多个排序键</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price, purchase_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> sale_price, product_id;</span><br><span class="line"><span class="comment">-- 当用于排序的列名中含有NULL时，NULL会在开头或末尾进行汇总。</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price, purchase_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> purchase_price;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/194608-421859.png" alt="image-20240117194559533"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/194638-270742.png" alt="image-20240117194611327"></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/194645-211947.png" alt="image-20240117194643249"></p><h4 id="2-7-1-别名"><a href="#2-7-1-别名" class="headerlink" title="2.7.1 别名"></a>2.7.1 别名</h4><p>GROUP BY 子句中不能使用SELECT 子句中定义的别名，但是在 ORDER BY 子句中却可以使用别名。为什么在GROUP BY中不可以而在ORDER BY中可以呢？</p><p>这是因为 SQL 在使用 HAVING 子句时 SELECT 语句的执行顺序为：</p><p>FROM → WHERE → GROUP BY → SELECT → HAVING → ORDER BY</p><p>其中 SELECT 的执行顺序在 GROUP BY 子句之后，ORDER BY 子句之前。</p><p>当在 ORDER BY 子句中使用别名时，已经知道了 SELECT 子句设置的别名，但是在 GROUP BY 子句执行时还不知道别名的存在，所以在 ORDER BY 子句中可以使用别名，但是在GROUP BY中不能使用别名。</p><h4 id="2-7-2-ORDER-BY-NULL"><a href="#2-7-2-ORDER-BY-NULL" class="headerlink" title="2.7.2 ORDER BY + NULL"></a>2.7.2 ORDER BY + NULL</h4><p>在MySQL中，<code>NULL</code> 值被认为比任何 <code>非NULL</code> 值低。因此，当顺序为 ASC（升序）时，<code>NULL</code> 值出现在第一位，而当顺序为 DESC（降序）时，则排序在最后。</p><p>使用如下代码构建示例表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">50</span>),</span><br><span class="line">    date_login <span class="type">DATE</span>,</span><br><span class="line">    <span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span>(name, date_login) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="keyword">NULL</span>,    <span class="string">&#x27;2017-03-12&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;john&#x27;</span>,   <span class="keyword">NULL</span>), </span><br><span class="line">(<span class="string">&#x27;david&#x27;</span>, <span class="string">&#x27;2016-12-24&#x27;</span>), </span><br><span class="line">(<span class="string">&#x27;zayne&#x27;</span>, <span class="string">&#x27;2017-03-02&#x27;</span>);</span><br></pre></td></tr></table></figure><p>一般有两种情况</p><ul><li><h5 id="将-NULL-值排在末行，同时将所有-非NULL-值按升序排列。"><a href="#将-NULL-值排在末行，同时将所有-非NULL-值按升序排列。" class="headerlink" title="将 NULL 值排在末行，同时将所有 非NULL 值按升序排列。"></a>将 <code>NULL</code> 值排在末行，同时将所有 <code>非NULL</code> 值按升序排列。</h5><ul><li><p>数字 or 日期类型</p><ul><li><p>可以在排序字段前添加一个负号（minus）来得到反向排序。（<code>-1、-2、-3....-∞</code>）</p></li><li><pre><code class="sql">SELECT * FROM user  ORDER BY -date_login DESC;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - ![image-20240117203403518](https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/203413-147629.png)</span><br><span class="line"></span><br><span class="line">- 字符型 or 字符型数字</span><br><span class="line"></span><br><span class="line">  - 不一定能得到期望的排序结果，可以使用 `IS NULL` 比较运算符。另外 `ISNULL( )` 函数等同于使用 `IS NULL` 比较运算符。</span><br><span class="line"></span><br><span class="line">  - ```sql</span><br><span class="line">    -- IS NULL</span><br><span class="line">    SELECT * FROM user </span><br><span class="line">     ORDER BY name IS NULL ASC,name ASC;</span><br><span class="line">     </span><br><span class="line">    -- ISNULL()</span><br><span class="line">    SELECT * FROM user </span><br><span class="line">     ORDER BY ISNULL(name) ASC,name ASC;</span><br></pre></td></tr></table></figure></code></pre></li><li><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/203527-405401.png" alt="image-20240117203510455"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/203540-322523.png" alt="image-20240117203517080"></p></li><li><p>上述语句先使用 <code>ISNULL(name)</code> 字段进行升序排列，而只有当 <code>name</code> 列值为 <code>NULL</code> 时，<code>ISNULL(name)</code> 才为真，所以其排到末行，而 <code>name ASC</code> 则实现了 <code>非NULL</code> 值升序排列。</p></li></ul></li><li><p>COALESCE</p><ul><li>&#96;&#96;&#96;sql<br>SELECT * FROM user<br> ORDER BY COALESCE(name, ‘zzzzz’) ASC;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - ![image-20240117203638186](https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/17/203639-420656.png)</span><br><span class="line"></span><br><span class="line">- ##### 将 `NULL` 值排在首行，同时将所有 `非NULL` 值按倒序排列。</span><br><span class="line"></span><br><span class="line">  - 数字 or 日期，还是要`-`号</span><br><span class="line"></span><br><span class="line">    - ```sql</span><br><span class="line">      SELECT * FROM user </span><br><span class="line">       ORDER BY -date_login ASC;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>字符型或者字符型数字</p><ul><li><p>此方法不一定能得到期望的排序结果，可以使用 <code>IS NOT NULL</code> 比较运算符。另外 <code>!ISNULL( )</code> 函数等同于使用 <code>IS NOT NULL</code> 比较运算符。</p></li><li><p>&#96;&#96;&#96;sql<br>– IS NOT NULL<br>SELECT * FROM user<br> ORDER BY name IS NOT NULL ASC,name DESC;</p><p>– !ISNULL()<br>SELECT * FROM user<br> ORDER BY !ISNULL(name) ASC,name DESC;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- COALESCE</span><br><span class="line"></span><br><span class="line">  - ```sql</span><br><span class="line">    SELECT * FROM user </span><br><span class="line">     ORDER BY COALESCE(name, &#x27;zzzzz&#x27;) DESC;</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h2 id="3-复杂的查询"><a href="#3-复杂的查询" class="headerlink" title="3 复杂的查询"></a>3 复杂的查询</h2><h3 id="3-1-视图"><a href="#3-1-视图" class="headerlink" title="3.1 视图"></a>3.1 视图</h3><p>视图是一个虚拟的表，依据SELECT语句来创建。可基于真实的表，也可以基于视图。</p><ul><li>为什么会存在视图</li></ul><ol><li>通过定义视图可以将频繁使用的SELECT语句保存以提高效率。</li><li>通过定义视图可以使用户看到的数据更加清晰。</li><li>通过定义视图可以不对外公开数据表全部字段，增强数据的保密性。</li><li>通过定义视图可以降低数据的冗余。</li></ol><ul><li><p>基本语法</p><ul><li>&#96;&#96;&#96;sql<br>CREATE VIEW &lt;视图名称&gt;(&lt;列名1&gt;,&lt;列名2&gt;,…) AS &lt;SELECT语句&gt;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  - 列要对应</span><br><span class="line"></span><br><span class="line">  - 视图名称唯一</span><br><span class="line"></span><br><span class="line">- 注意事项</span><br><span class="line"></span><br><span class="line">一般的DBMS中，定义视图时，不能用ORDER BY语句。视图和表一样，数据行是没有顺序的。</span><br><span class="line"></span><br><span class="line">错误例子：</span><br><span class="line"></span><br><span class="line">```sql</span><br><span class="line">CREATE VIEW productsum (product_type, cnt_product)</span><br><span class="line">AS</span><br><span class="line">SELECT product_type, COUNT(*)</span><br><span class="line">  FROM product</span><br><span class="line"> GROUP BY product_type</span><br><span class="line"> ORDER BY product_type;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-1-2-视图创建实例"><a href="#3-1-2-视图创建实例" class="headerlink" title="3.1.2 视图创建实例"></a>3.1.2 视图创建实例</h4><ul><li>基于单表的视图</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> productsum (product_type, cnt_product)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, <span class="built_in">COUNT</span>(<span class="operator">*</span>)</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type ;</span><br></pre></td></tr></table></figure><ul><li>基于多表的视图</li></ul><ol><li>创建多表</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> shop_product</span><br><span class="line">(shop_id    <span class="type">CHAR</span>(<span class="number">4</span>)       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> shop_name  <span class="type">VARCHAR</span>(<span class="number">200</span>)  <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> product_id <span class="type">CHAR</span>(<span class="number">4</span>)       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> quantity   <span class="type">INTEGER</span>       <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line"> <span class="keyword">PRIMARY</span> KEY (shop_id, product_id));</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000A&#x27;</span>,<span class="string">&#x27;东京&#x27;</span>,<span class="string">&#x27;0001&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000A&#x27;</span>,<span class="string">&#x27;东京&#x27;</span>,<span class="string">&#x27;0002&#x27;</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000A&#x27;</span>,<span class="string">&#x27;东京&#x27;</span>,<span class="string">&#x27;0003&#x27;</span>,<span class="number">15</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000B&#x27;</span>,<span class="string">&#x27;名古屋&#x27;</span>,<span class="string">&#x27;0002&#x27;</span>,<span class="number">30</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000B&#x27;</span>,<span class="string">&#x27;名古屋&#x27;</span>,<span class="string">&#x27;0003&#x27;</span>,<span class="number">120</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000B&#x27;</span>,<span class="string">&#x27;名古屋&#x27;</span>,<span class="string">&#x27;0004&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000B&#x27;</span>,<span class="string">&#x27;名古屋&#x27;</span>,<span class="string">&#x27;0006&#x27;</span>,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000B&#x27;</span>,<span class="string">&#x27;名古屋&#x27;</span>,<span class="string">&#x27;0007&#x27;</span>,<span class="number">40</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000C&#x27;</span>,<span class="string">&#x27;大阪&#x27;</span>,<span class="string">&#x27;0003&#x27;</span>,<span class="number">20</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000C&#x27;</span>,<span class="string">&#x27;大阪&#x27;</span>,<span class="string">&#x27;0004&#x27;</span>,<span class="number">50</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000C&#x27;</span>,<span class="string">&#x27;大阪&#x27;</span>,<span class="string">&#x27;0006&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000C&#x27;</span>,<span class="string">&#x27;大阪&#x27;</span>,<span class="string">&#x27;0007&#x27;</span>,<span class="number">70</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shop_product (shop_id, shop_name, product_id, quantity) <span class="keyword">VALUES</span> (<span class="string">&#x27;000D&#x27;</span>,<span class="string">&#x27;福冈&#x27;</span>,<span class="string">&#x27;0001&#x27;</span>,<span class="number">100</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li>创建视图</li></ol><p>基于product和shop_product</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> view_shop_product(product_type, sale_price, shop_name)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type, sale_price, shop_name</span><br><span class="line">  <span class="keyword">FROM</span> product,</span><br><span class="line">       shop_product</span><br><span class="line"> <span class="keyword">WHERE</span> product.product_id <span class="operator">=</span> shop_product.product_id;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/172316-565552.png" alt="image-20240124172257500"></p><ol start="3"><li>在创建的视图<code>view_shop_product</code>的基础上查询</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sale_price, shop_name</span><br><span class="line">  <span class="keyword">FROM</span> view_shop_product</span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;衣服&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/172628-730276.png" alt="image-20240124172521028"></p><h4 id="3-1-3-视图修改"><a href="#3-1-3-视图修改" class="headerlink" title="3.1.3 视图修改"></a>3.1.3 视图修改</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="operator">&gt;</span> <span class="keyword">AS</span> <span class="operator">&lt;</span><span class="keyword">SELECT</span>语句<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><p>将上述视图修改：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">VIEW</span> productSum</span><br><span class="line">    <span class="keyword">AS</span></span><br><span class="line">        <span class="keyword">SELECT</span> product_type, sale_price</span><br><span class="line">          <span class="keyword">FROM</span> Product</span><br><span class="line">         <span class="keyword">WHERE</span> regist_date <span class="operator">&gt;</span> <span class="string">&#x27;2009-09-11&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/173332-64521.png" alt="image-20240124172836307"></p><h4 id="3-1-4-视图更新"><a href="#3-1-4-视图更新" class="headerlink" title="3.1.4 视图更新"></a>3.1.4 视图更新</h4><p>不可被更新的视图含有：</p><ul><li><p>聚合函数 SUM()、MIN()、MAX()、COUNT() 等。</p></li><li><p>DISTINCT 关键字。</p></li><li><p>GROUP BY 子句。</p></li><li><p>HAVING 子句。</p></li><li><p>UNION 或 UNION ALL 运算符。</p></li><li><p>FROM 子句中包含多个表。</p></li><li><p>更新视图</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> productsum</span><br><span class="line">   <span class="keyword">SET</span> sale_price <span class="operator">=</span> <span class="string">&#x27;5000&#x27;</span></span><br><span class="line"> <span class="keyword">WHERE</span> product_type <span class="operator">=</span> <span class="string">&#x27;办公用品&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/173638-163984.png" alt="image-20240124173553339"></p><p>ps:在原表中也更新了</p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/173755-475747.png" alt="image-20240124173704555"></p><p><strong>总体来说，不推荐这种方式，有可能导致数据不一致。</strong></p><h4 id="3-1-5-删除视图"><a href="#3-1-5-删除视图" class="headerlink" title="3.1.5 删除视图"></a>3.1.5 删除视图</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> <span class="operator">&lt;</span>视图名<span class="number">1</span><span class="operator">&gt;</span> [ , <span class="operator">&lt;</span>视图名<span class="number">2</span><span class="operator">&gt;</span> …]</span><br><span class="line"><span class="comment">-- 删除刚刚创建的productsum</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">VIEW</span> productsum;</span><br></pre></td></tr></table></figure><h3 id="3-2-子查询"><a href="#3-2-子查询" class="headerlink" title="3.2  子查询"></a>3.2  子查询</h3><h4 id="3-2-1-嵌套子查询"><a href="#3-2-1-嵌套子查询" class="headerlink" title="3.2.1 嵌套子查询"></a>3.2.1 嵌套子查询</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_type, cnt_product</span><br><span class="line"><span class="keyword">FROM</span> (<span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">        <span class="keyword">FROM</span> (<span class="keyword">SELECT</span> product_type, </span><br><span class="line">                      <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> cnt_product</span><br><span class="line">                <span class="keyword">FROM</span> product </span><br><span class="line">               <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type) <span class="keyword">AS</span> productsum</span><br><span class="line">       <span class="keyword">WHERE</span> cnt_product <span class="operator">=</span> <span class="number">4</span>) <span class="keyword">AS</span> productsum2;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240124175155939.png" alt="image-20240124175155939"></p><ul><li>最内层查询命名为productsum</li><li>第二层将个数 &#x3D; 4的商品查询</li><li>最外层查询 product_type 和 cnt_product</li></ul><h4 id="3-2-2-标量子查询"><a href="#3-2-2-标量子查询" class="headerlink" title="3.2.2 标量子查询"></a>3.2.2 标量子查询</h4><p>返回表中具体的<strong>某一行的某一列</strong>。</p><p>例：查找价格大于平均值的商品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, product_name, sale_price</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">WHERE</span> sale_price <span class="operator">&gt;</span> (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price) <span class="keyword">FROM</span> product);</span><br><span class="line"> <span class="comment">-- 或</span></span><br><span class="line"> <span class="keyword">SELECT</span> product_id,</span><br><span class="line">       product_name,</span><br><span class="line">       sale_price,</span><br><span class="line">       (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(sale_price)</span><br><span class="line">          <span class="keyword">FROM</span> product) <span class="keyword">AS</span> avg_price</span><br><span class="line">  <span class="keyword">FROM</span> product;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/180238-153250.png" alt="image-20240124175824805"><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/183209-557894.png" alt="image-20240124175836028"></p><p>结果不一样</p><h4 id="3-3-3关联子查询"><a href="#3-3-3关联子查询" class="headerlink" title="3.3.3关联子查询"></a>3.3.3关联子查询</h4><h2 id="4-集合运算"><a href="#4-集合运算" class="headerlink" title="4 集合运算"></a>4 集合运算</h2><h3 id="4-1-表的加减运算"><a href="#4-1-表的加减运算" class="headerlink" title="4.1 表的加减运算"></a>4.1 表的加减运算</h3><h4 id="4-1-1-加法-—-UNION"><a href="#4-1-1-加法-—-UNION" class="headerlink" title="4.1.1 加法 —- UNION"></a>4.1.1 加法 —- UNION</h4><p><strong>UNION</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, product_name</span><br><span class="line">  <span class="keyword">FROM</span> product</span><br><span class="line"> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name</span><br><span class="line">  <span class="keyword">FROM</span> product2;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240124183500517.png" alt="image-20240124183500517"></p><p>将两张表中出现的元素都查询出来。</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240124183535531.png" alt="image-20240124183535531"></p><p>有时UNION也可以用OR改写（或者xx的时候）</p><ul><li>包含重复行的集合运算 <strong>UNION ALL</strong></li></ul><p>直接用UNION可以发现，会自动去除重复行，如果想保留：UNION –&gt; UNION ALL</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 保留重复行</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type</span><br><span class="line">  <span class="keyword">FROM</span> Product</span><br><span class="line"> <span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> product_type</span><br><span class="line">  <span class="keyword">FROM</span> Product2;</span><br></pre></td></tr></table></figure><ul><li>隐式数据类型转换</li></ul><p>我们会把类型完全一致, 并且代表相同属性的列使用 UNION 合并到一起显示, 但有时候, 即使数据类型不完全相同, 也会通过隐式类型转换来将两个类型不同的列放在一列里显示, 例如字符串和数值类型:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> product_id, product_name, <span class="string">&#x27;1&#x27;</span></span><br><span class="line">  <span class="keyword">FROM</span> Product</span><br><span class="line"> <span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> product_id, product_name,sale_price</span><br><span class="line">  <span class="keyword">FROM</span> Product2;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/184601-668478.png" alt="image-20240124184321676"></p><h4 id="4-1-2-交集"><a href="#4-1-2-交集" class="headerlink" title="4.1.2 交集"></a>4.1.2 交集</h4><p>MySQL 8.0 不支持INTERSECT直接求交集，可通过<code>inner join</code>来求交集</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p1.product_id, p1.product_name</span><br><span class="line">  <span class="keyword">FROM</span> Product p1</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> Product2 p2</span><br><span class="line"><span class="keyword">ON</span> p1.product_id<span class="operator">=</span>p2.product_id</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/184942-526001.png" alt="image-20240124184651481"></p><h4 id="4-1-3-差集、补集与表的减法"><a href="#4-1-3-差集、补集与表的减法" class="headerlink" title="4.1.3 差集、补集与表的减法"></a>4.1.3 差集、补集与表的减法</h4><p>MySQL 8.0 还不支持 表的减法运算符 EXCEPT，但可使用<code>NOT IN</code>代替。</p><p>例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 找出只存在于Product表但不存在于Product2表的商品。</span></span><br><span class="line"><span class="comment">-- 使用 NOT IN 子句的实现方法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">  <span class="keyword">FROM</span> Product</span><br><span class="line"> <span class="keyword">WHERE</span> product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (<span class="keyword">SELECT</span> product_id </span><br><span class="line">                            <span class="keyword">FROM</span> Product2)</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/24/185231-909705.png" alt="image-20240124185139073"></p><h3 id="4-2-连结-JOIN"><a href="#4-2-连结-JOIN" class="headerlink" title="4.2 连结  JOIN"></a>4.2 连结  <strong>JOIN</strong></h3><p>上面集合运算是针对数据的行的变化，而连结针对列。</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240124185626662.png" alt="image-20240124185626662"></p><p>连结(JOIN)就是使用某种关联条件(一般是使用相等判断谓词”&#x3D;”), 将其他表中的列添加过来, 进行“添加列”的集合运算. 可以说,连结是 SQL 查询的核心操作, 掌握了连结, 能够从两张甚至多张表中获取列, 能够将过去使用关联子查询等过于复杂的查询简化为更加易读的形式, 以及进行一些更加复杂的查询。</p><h4 id="4-2-1-内连结-—-INNER-JOIN"><a href="#4-2-1-内连结-—-INNER-JOIN" class="headerlink" title="4.2.1 内连结  —- INNER JOIN"></a>4.2.1 内连结  —- <code>INNER JOIN</code></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 内连结</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>tb_1<span class="operator">&gt;</span> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>tb_2<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">condition</span>(s)<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用内连结从两个表获取信息</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SP.shop_id</span><br><span class="line">       ,SP.shop_name</span><br><span class="line">       ,SP.product_id</span><br><span class="line">       ,P.product_name</span><br><span class="line">       ,P.product_type</span><br><span class="line">       ,P.sale_price</span><br><span class="line">       ,SP.quantity</span><br><span class="line"><span class="comment">-- 连结表</span></span><br><span class="line">  <span class="keyword">FROM</span> ShopProduct <span class="keyword">AS</span> SP</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line"> <span class="comment">-- ON来说明连结条件</span></span><br><span class="line">    <span class="keyword">ON</span> SP.product_id <span class="operator">=</span> P.product_id;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/25/153448-668659.png" alt="image-20240125153448710"></p><ul><li>结合 WHERE 子句使用内连结</li></ul><p>WHERE要写在ON后面</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line">  <span class="keyword">FROM</span> (<span class="comment">-- 第一步查询的结果</span></span><br><span class="line">        <span class="keyword">SELECT</span> SP.shop_id</span><br><span class="line">               ,SP.shop_name</span><br><span class="line">               ,SP.product_id</span><br><span class="line">               ,P.product_name</span><br><span class="line">               ,P.product_type</span><br><span class="line">               ,P.sale_price</span><br><span class="line">               ,SP.quantity</span><br><span class="line">          <span class="keyword">FROM</span> ShopProduct <span class="keyword">AS</span> SP</span><br><span class="line">         <span class="keyword">INNER</span> <span class="keyword">JOIN</span> Product <span class="keyword">AS</span> P</span><br><span class="line">            <span class="keyword">ON</span> SP.product_id <span class="operator">=</span> P.product_id) <span class="keyword">AS</span> STEP1</span><br><span class="line"> <span class="keyword">WHERE</span> shop_name <span class="operator">=</span> <span class="string">&#x27;东京&#x27;</span></span><br><span class="line">   <span class="keyword">AND</span> product_type <span class="operator">=</span> <span class="string">&#x27;衣服&#x27;</span> ;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/25/154228-867415.png" alt="image-20240125154228394"></p><ul><li>结合 GROUP BY 子句使用内连结</li></ul><p>结合 GROUP BY 子句使用内连结, 需要根据分组列位于哪个表区别对待。</p><p>最简单的情形, 是在内连结之前就使用 GROUP BY 子句.</p><p>但是如果分组列和被聚合的列不在同一张表, 且二者都未被用于连结两张表, 则只能先连结, 再聚合。</p><p>例：每个商店中, 售价最高的商品的售价分别是多少?</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> sp.shop_id, sp.shop_name, <span class="built_in">MAX</span>(p.sale_price) <span class="keyword">AS</span> max_price</span><br><span class="line"><span class="keyword">FROM</span> shopproduct <span class="keyword">AS</span> sp</span><br><span class="line"><span class="keyword">INNER</span> <span class="keyword">JOIN</span> product <span class="keyword">AS</span> p</span><br><span class="line"><span class="keyword">ON</span> sp.product_id <span class="operator">=</span> p.product_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> sp.shop_id, sp.shop_name</span><br></pre></td></tr></table></figure><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240125154912322.png" alt="image-20240125154912322"></p><h4 id="4-2-2-自连结-—-SELF-JOIN"><a href="#4-2-2-自连结-—-SELF-JOIN" class="headerlink" title="4.2.2 自连结 —- SELF JOIN"></a>4.2.2 自连结 —- <code>SELF JOIN</code></h4><p>例：找出每个商品种类当中售价高于该类商品的平均售价的商品</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  P1.product_id</span><br><span class="line">       ,P1.product_name</span><br><span class="line">       ,P1.product_type</span><br><span class="line">       ,P1.sale_price</span><br><span class="line">       ,P2.avg_price</span><br><span class="line">  <span class="keyword">FROM</span> Product <span class="keyword">AS</span> P1</span><br><span class="line"> <span class="keyword">INNER</span> <span class="keyword">JOIN</span> </span><br><span class="line"> <span class="comment">-- 找出平均价</span></span><br><span class="line">   (<span class="keyword">SELECT</span> product_type,<span class="built_in">AVG</span>(sale_price) <span class="keyword">AS</span> avg_price </span><br><span class="line">      <span class="keyword">FROM</span> Product </span><br><span class="line">     <span class="keyword">GROUP</span> <span class="keyword">BY</span> product_type) <span class="keyword">AS</span> P2 </span><br><span class="line">    <span class="keyword">ON</span> P1.product_type <span class="operator">=</span> P2.product_type</span><br><span class="line"> <span class="keyword">WHERE</span> P1.sale_price <span class="operator">&gt;</span> P2.avg_price;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/25/160304-360168.png" alt="image-20240125155820273"></p><h4 id="4-2-4-自然连结-—-NATURAL-JOIN"><a href="#4-2-4-自然连结-—-NATURAL-JOIN" class="headerlink" title="4.2.4 自然连结 —- NATURAL JOIN"></a>4.2.4 自然连结 —- <code>NATURAL JOIN</code></h4><p>自然连结并不是区别于内连结和外连结的第三种连结, 它其实是内连结的一种特例–当两个表进行自然连结时, 会按照两个表中都包含的列名来进行等值内连结, 此时无需使用 ON 来指定连接条件。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span>  <span class="keyword">FROM</span> shopproduct <span class="keyword">NATURAL</span> <span class="keyword">JOIN</span> Product</span><br></pre></td></tr></table></figure><h3 id="4-3-外连结-—-OUTER-JOIN"><a href="#4-3-外连结-—-OUTER-JOIN" class="headerlink" title="4.3  外连结 —- OUTER JOIN"></a>4.3  外连结 —- <code>OUTER JOIN</code></h3><p>内连结会丢弃两张表中不满足 ON 条件的行,和内连结相对的就是外连结. 外连结会根据外连结的种类有选择地保留无法匹配到的行。</p><p>按照保留的行位于哪张表,外连结有三种形式: 左连结, 右连结和全外连结。</p><p>左连结会保存左表中无法按照 ON 子句匹配到的行, 此时对应右表的行均为缺失值; 右连结则会保存右表中无法按照 ON 子句匹配到的行, 此时对应左表的行均为缺失值; 而全外连结则会同时保存两个表中无法按照 ON子句匹配到的行, 相应的另一张表中的行用缺失值填充。</p><p>三种外连结的对应语法分别为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 左连结     </span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>tb_1<span class="operator">&gt;</span> <span class="keyword">LEFT</span>  <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>tb_2<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">condition</span>(s)<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 右连结     </span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>tb_1<span class="operator">&gt;</span> <span class="keyword">RIGHT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>tb_2<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">condition</span>(s)<span class="operator">&gt;</span></span><br><span class="line"><span class="comment">-- 全外连结</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="operator">&lt;</span>tb_1<span class="operator">&gt;</span> <span class="keyword">FULL</span>  <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> <span class="operator">&lt;</span>tb_2<span class="operator">&gt;</span> <span class="keyword">ON</span> <span class="operator">&lt;</span><span class="keyword">condition</span>(s)<span class="operator">&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-3-1-左连结（LEFT-JOIN）和右连结（RIGHT-JOIN）"><a href="#4-3-1-左连结（LEFT-JOIN）和右连结（RIGHT-JOIN）" class="headerlink" title="4.3.1 左连结（LEFT JOIN）和右连结（RIGHT JOIN）"></a>4.3.1 左连结（<code>LEFT JOIN</code>）和右连结（<code>RIGHT JOIN</code>）</h4><p>由于连结时可以交换左表和右表的位置, 因此左连结和右连结并没有本质区别.接下来我们先以左连结为例进行学习. 所有的内容在调换两个表的前后位置, 并将左连结改为右连结之后, 都能得到相同的结果. 稍后再介绍全外连结的概念。</p><h4 id="4-3-2-左连结-—-LEFT-JOIN"><a href="#4-3-2-左连结-—-LEFT-JOIN" class="headerlink" title="4.3.2 左连结 —- LEFT JOIN"></a>4.3.2 左连结 —- <code>LEFT JOIN</code></h4><p>例：统计每种商品分别在哪些商店有售, 需要包括那些在每个商店都没货的商品。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> SP.shop_id</span><br><span class="line">       ,SP.shop_name</span><br><span class="line">       ,SP.product_id</span><br><span class="line">       ,P.product_name</span><br><span class="line">       ,P.sale_price</span><br><span class="line">  <span class="keyword">FROM</span> Product <span class="keyword">AS</span> P</span><br><span class="line">  <span class="keyword">LEFT</span> <span class="keyword">OUTER</span> <span class="keyword">JOIN</span> ShopProduct <span class="keyword">AS</span> SP</span><br><span class="line">    <span class="keyword">ON</span> SP.product_id <span class="operator">=</span> P.product_id;</span><br></pre></td></tr></table></figure><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/25/161135-669487.png" alt="image-20240125160959892"></p><p>顾名思义,使用 LEFT 时 FROM 子句中写在左侧的表是主表,使用 RIGHT 时右侧的表是主表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;SQL基础&quot;&gt;&lt;a href=&quot;#SQL基础&quot; class=&quot;headerlink&quot; title=&quot;SQL基础&quot;&gt;&lt;/a&gt;SQL基础&lt;/h1&gt;&lt;h2 id=&quot;1-数据库简介&quot;&gt;&lt;a href=&quot;#1-数据库简介&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
    <category term="SQL" scheme="https://www.bebella.cc/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Jupyter快捷键</title>
    <link href="https://www.bebella.cc/2024/01/15/Jupyter%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://www.bebella.cc/2024/01/15/Jupyter%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2024-01-15T08:20:21.000Z</published>
    <updated>2024-01-15T08:34:36.135Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Jupyter-快捷键"><a href="#Jupyter-快捷键" class="headerlink" title="Jupyter 快捷键"></a>Jupyter 快捷键</h2><ul><li><p>执行当前单元格并移动到下一个格：<code>Shift + Enter</code></p><ul><li>执行且不移动：<code>Ctrl + Enter</code></li><li>执行并插入新单元格：<code>Alt + Enter</code></li></ul></li><li><p>编辑模式 -&gt; 命令模式：<code>Esc</code></p></li><li><p>命令模式 -&gt; 编辑模式：<code>Enter</code></p></li><li><p>插入（直接输入即可）</p><ul><li>前：<code>A</code></li><li>后：<code>B</code></li></ul></li><li><p>删除：<code>D + D</code>（连续2D）</p></li><li><p>当前单元格切换为<code>Markdown</code>格式：<code>M</code></p></li><li><p>当前单元格切换为<code>代码</code>格式：<code>Y</code></p></li><li><p>保存：<code>Ctrl + S</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Jupyter-快捷键&quot;&gt;&lt;a href=&quot;#Jupyter-快捷键&quot; class=&quot;headerlink&quot; title=&quot;Jupyter 快捷键&quot;&gt;&lt;/a&gt;Jupyter 快捷键&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;执行当前单元格并移动到下一个格：&lt;code&gt;Shi</summary>
      
    
    
    
    
    <category term="Jupyter" scheme="https://www.bebella.cc/tags/Jupyter/"/>
    
  </entry>
  
  <entry>
    <title>LeetCode专题1：数组</title>
    <link href="https://www.bebella.cc/2024/01/10/LeetCode%E4%B8%93%E9%A2%981%EF%BC%9A%E6%95%B0%E7%BB%84/"/>
    <id>https://www.bebella.cc/2024/01/10/LeetCode%E4%B8%93%E9%A2%981%EF%BC%9A%E6%95%B0%E7%BB%84/</id>
    <published>2024-01-10T11:56:31.000Z</published>
    <updated>2024-01-10T15:45:56.152Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组专题"><a href="#数组专题" class="headerlink" title="数组专题"></a>数组专题</h1><h2 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素"></a>27. 移除元素</h2><p><a href="https://leetcode.cn/problems/remove-element/description/">题目链接</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 暴力解法</span></span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">removeElement</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> val)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; size; i ++)&#123;</span><br><span class="line">            <span class="keyword">if</span> (nums[i] == val)&#123;  <span class="comment">// 发现要移除的，将数组元素前移</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j = i + <span class="number">1</span>; j &lt; size; j ++)&#123;</span><br><span class="line">                    nums[j - <span class="number">1</span>] = nums[j];</span><br><span class="line">                &#125;</span><br><span class="line">                i --;</span><br><span class="line">                size --;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977. 有序数组的平方"></a>977. 有序数组的平方</h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>给你一个按 <strong>非递减顺序</strong> 排序的整数数组 <code>nums</code>，返回 <strong>每个数字的平方</strong> 组成的新数组，要求也按 <strong>非递减顺序</strong> 排序。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-4,-1,0,3,10]</span><br><span class="line">输出：[0,1,9,16,100]</span><br><span class="line">解释：平方后，数组变为 [16,1,0,9,100]</span><br><span class="line">排序后，数组变为 [0,1,9,16,100]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [-7,-3,2,3,11]</span><br><span class="line">输出：[4,9,9,49,121]</span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><hr><h4 id="暴力解法："><a href="#暴力解法：" class="headerlink" title="暴力解法："></a>暴力解法：</h4><p>平方后排序</p><h4 id="双指针法："><a href="#双指针法：" class="headerlink" title="双指针法："></a>双指针法：</h4><p>数组是非递减的，平方之后最大的数只可能在最右边或最左边。令i指向起始位置，j指向结束位置。</p><p>定义<code>result</code>， 存储平方的结果，归并的思想。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sortedSquares</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> k = nums.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">result</span><span class="params">(nums.size(), <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>,  j = nums.<span class="built_in">size</span>() - <span class="number">1</span>; i &lt;= j; )&#123; <span class="comment">// 注意：结束条件为i &gt; j</span></span><br><span class="line">            <span class="keyword">if</span> (nums[i] * nums[i] &lt; nums[j] * nums[j])&#123;</span><br><span class="line">                result[k --] = nums[j] * nums[j];</span><br><span class="line">                j --;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                result[k --] = nums[i] * nums[i];</span><br><span class="line">                i ++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="209-长度最小的子数组"><a href="#209-长度最小的子数组" class="headerlink" title="209.  长度最小的子数组"></a>209.  长度最小的子数组</h2><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/description/">题目链接</a></p><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>给定一个含有 <code>n</code> 个正整数的数组和一个正整数 <code>target</code> <strong>。</strong></p><p>找出该数组中满足其总和大于等于 <code>target</code> 的长度最小的 <strong>连续子数组</strong> <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> ，并返回其长度<strong>。</strong>如果不存在符合条件的子数组，返回 <code>0</code> 。</p><p><strong>示例 1：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 7, nums = [2,3,1,2,4,3]</span><br><span class="line">输出：2</span><br><span class="line">解释：子数组 [4,3] 是该条件下的长度最小的子数组。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 4, nums = [1,4,4]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：target = 11, nums = [1,1,1,1,1,1,1,1]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= target &lt;= 109</code></li><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><code>1 &lt;= nums[i] &lt;= 105</code></li></ul><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><hr><h4 id="滑动窗口："><a href="#滑动窗口：" class="headerlink" title="滑动窗口："></a>滑动窗口：</h4><p>不断的调节子序列的起始位置和终止位置，从而得出我们要想的结果**。</p><p>本题中需要确定：</p><ul><li><strong>窗口内是什么？</strong><ul><li>满足和 &gt;&#x3D; s 的长度最小的 连续 子数组</li></ul></li><li><strong>如何移动窗口的起始位置？</strong><ul><li>和 &gt; s 的时候要向前移动（缩小了）</li></ul></li><li><strong>如何移动窗口的结束位置？</strong><ul><li>结束位置就是遍历数组的指针，也就是for循环里面的索引</li></ul></li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/10/231242-333469.png" alt="image-20240110231238833"></p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">minSubArrayLen</span><span class="params">(<span class="type">int</span> target, vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> result = INT32_MAX;</span><br><span class="line">        <span class="type">int</span> sum = <span class="number">0</span>; <span class="comment">// 滑动窗口数值之和</span></span><br><span class="line">        <span class="type">int</span> subLength = <span class="number">0</span>;<span class="comment">// 滑动窗口的长度</span></span><br><span class="line">        <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; nums.<span class="built_in">size</span>(); j ++)&#123;</span><br><span class="line">            sum += nums[j];</span><br><span class="line">            <span class="comment">// while() 每次更新i（起始位置），并不断比较subLength是否符合条件</span></span><br><span class="line">            <span class="keyword">while</span>(sum &gt;= target)&#123;</span><br><span class="line">                <span class="comment">// 记录子数组的长度</span></span><br><span class="line">                subLength = j - i + <span class="number">1</span>;</span><br><span class="line">                result = result &lt; subLength ? result : subLength;</span><br><span class="line">                sum -= nums[i ++];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若result没有被赋值的话，=没有符合条件的subLength</span></span><br><span class="line">        <span class="keyword">return</span> result == INT32_MAX ? <span class="number">0</span> : result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="59-螺旋矩阵-II"><a href="#59-螺旋矩阵-II" class="headerlink" title="59. 螺旋矩阵 II"></a>59. 螺旋矩阵 II</h2><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/description/">题目链接</a></p><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><hr><p>给你一个正整数 <code>n</code> ，生成一个包含 <code>1</code> 到 $n^2$ 所有元素，且元素按顺时针顺序螺旋排列的 <code>n x n</code> 正方形矩阵 <code>matrix</code> 。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/spiraln.jpg" alt="img"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[[1,2,3],[8,9,4],[7,6,5]]</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1</span><br><span class="line">输出：[[1]]</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li></ul><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><hr><p>直接模拟</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">generateMatrix</span>(<span class="type">int</span> n) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="type">int</span>&gt;&gt; <span class="built_in">res</span>(n, <span class="built_in">vector</span>&lt;<span class="type">int</span>&gt;(n, <span class="number">0</span>));</span><br><span class="line">        <span class="comment">// 每个圈的循环的起始位置</span></span><br><span class="line">        <span class="type">int</span> startx = <span class="number">0</span>, starty = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 每个圈循环次数</span></span><br><span class="line">        <span class="type">int</span> loop = n / <span class="number">2</span>;</span><br><span class="line">        <span class="comment">// 矩阵中间的位置（中心点）</span></span><br><span class="line">        <span class="type">int</span> mid = n / <span class="number">2</span>; </span><br><span class="line">        <span class="comment">// 给矩阵中每个空格赋值</span></span><br><span class="line">        <span class="type">int</span> count = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// 控制每一条边遍历的长度</span></span><br><span class="line">        <span class="type">int</span> offset = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> i, j;</span><br><span class="line">        <span class="keyword">while</span>(loop --)&#123;</span><br><span class="line">            i = startx;</span><br><span class="line">            j = starty;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 模拟转圈</span></span><br><span class="line">            <span class="comment">// 1. 上行，从左到右</span></span><br><span class="line">            <span class="keyword">for</span> (j = starty; j &lt; n - offset; j ++)&#123;</span><br><span class="line">                res[startx][j] = count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 2. 右行，从上到下</span></span><br><span class="line">            <span class="keyword">for</span> (i = startx; i &lt; n - offset; i ++)&#123;</span><br><span class="line">                res[i][j] = count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 3. 下行，从右到左</span></span><br><span class="line">            <span class="keyword">for</span> (;j &gt; starty; j --)&#123;</span><br><span class="line">                res[i][j]  = count ++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4. 左行，从下到上</span></span><br><span class="line">            <span class="keyword">for</span> (; i &gt; startx; i --)&#123;</span><br><span class="line">                res[i][j] = count ++;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 从第二期开始起始位置要 +1。eg：第一次（0,0），第二次（1,1）</span></span><br><span class="line">            startx ++;</span><br><span class="line">            starty ++;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// offset 控制每一圈里的每一条边遍历的长度</span></span><br><span class="line">            offset += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 若n基数</span></span><br><span class="line">        <span class="keyword">if</span> (n % <span class="number">2</span>)&#123;</span><br><span class="line">            res[mid][mid] = count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数组专题&quot;&gt;&lt;a href=&quot;#数组专题&quot; class=&quot;headerlink&quot; title=&quot;数组专题&quot;&gt;&lt;/a&gt;数组专题&lt;/h1&gt;&lt;h2 id=&quot;27-移除元素&quot;&gt;&lt;a href=&quot;#27-移除元素&quot; class=&quot;headerlink&quot; title=&quot;27.</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Zotero学习与使用</title>
    <link href="https://www.bebella.cc/2024/01/01/Zotero%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.bebella.cc/2024/01/01/Zotero%E5%AD%A6%E4%B9%A0%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2024-01-01T08:50:03.000Z</published>
    <updated>2024-01-03T12:06:40.377Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、安装与获取"><a href="#一、安装与获取" class="headerlink" title="一、安装与获取"></a>一、安装与获取</h3><p>自行百度plz，记得装浏览器插件</p><h3 id="二、题录收集"><a href="#二、题录收集" class="headerlink" title="二、题录收集"></a>二、题录收集</h3><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/01/170216-474905.png" alt="image-20240101170213797"></p><h3 id="三、题录管理"><a href="#三、题录管理" class="headerlink" title="三、题录管理"></a>三、题录管理</h3><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/01/170331-774822.png" alt="image-20240101170330654"></p><ol><li><p>移动分类</p><ul><li>左键+shift 可以移动</li><li>右键可以添加、移除</li><li>选中一篇 +Ctrl，可以显示文献所在目录</li></ul></li><li><p>查重 + 合并</p><ul><li><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240101170653972.png" alt="image-20240101170653972"></li></ul><ol start="3"><li>关联<ul><li>“关联文献”中关联，不可传递</li></ul></li><li>标签<ul><li>同3</li></ul></li><li>笔记<ul><li>附件笔记</li><li>注释笔记<ul><li>内置了PDF阅读器，导出即可</li></ul></li><li>条目笔记</li></ul></li><li>RSS订阅<ul><li><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/01/171026-236372.png" alt="image-20240101171025017"></li></ul></li></ol><p>总结</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20240101171128760.png" alt="image-20240101171128760"></p></li></ol><h3 id="四、论文中插入引用"><a href="#四、论文中插入引用" class="headerlink" title="四、论文中插入引用"></a>四、论文中插入引用</h3><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/01/171239-140428.png" alt="image-20240101171235958"></p><p>然后输入标题&#x2F;经典视图 </p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/01/171322-605507.png" alt="image-20240101171319218"></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202401/01/171935-288126.png" alt="image-20240101171847550"></p><h3 id="五、云同步"><a href="#五、云同步" class="headerlink" title="五、云同步"></a>五、云同步</h3><p>坚果云</p><h3 id="六、插件"><a href="#六、插件" class="headerlink" title="六、插件"></a>六、插件</h3><p>安装插件：下载好后直接拖拽：工具—-插件</p><ol><li><p>Jasminum（茉莉花）</p><p>提取中文PDF</p><p>Download: <a href="https://github.com/l0o0/jasminum">https://github.com/l0o0/jasminum</a></p></li><li><p>翻译</p><p><a href="https://github.com/windingwind/zotero-pdf-translate">https://github.com/windingwind/zotero-pdf-translate</a></p></li></ol><hr><p>学习链接：</p><p>1、【【商小图学堂】文献管理神器之Zotero】<a href="https://www.bilibili.com/video/BV1vS4y1q7uw?vd_source=ff4fdf111083f114ea22f144e77511bc">https://www.bilibili.com/video/BV1vS4y1q7uw?vd_source=ff4fdf111083f114ea22f144e77511bc</a></p><p>2、Zotero中文学习小组 <a href="https://zotero-chinese.com/">https://zotero-chinese.com/</a></p><p>（适合快速查找功能）</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;一、安装与获取&quot;&gt;&lt;a href=&quot;#一、安装与获取&quot; class=&quot;headerlink&quot; title=&quot;一、安装与获取&quot;&gt;&lt;/a&gt;一、安装与获取&lt;/h3&gt;&lt;p&gt;自行百度plz，记得装浏览器插件&lt;/p&gt;
&lt;h3 id=&quot;二、题录收集&quot;&gt;&lt;a href=&quot;#二、题</summary>
      
    
    
    
    
    <category term="学习" scheme="https://www.bebella.cc/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理</title>
    <link href="https://www.bebella.cc/2023/09/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    <id>https://www.bebella.cc/2023/09/16/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/</id>
    <published>2023-09-16T11:48:55.000Z</published>
    <updated>2023-09-16T12:26:04.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>二轮完整记录一些知识点与做题技巧</p><h2 id="第7章-I-x2F-O-系统"><a href="#第7章-I-x2F-O-系统" class="headerlink" title="第7章 I&#x2F;O 系统"></a>第7章 I&#x2F;O 系统</h2><h3 id="概览："><a href="#概览：" class="headerlink" title="概览："></a>概览：</h3><ul><li>I&#x2F;O 接口功能</li><li>I&#x2F;O 接口基本结构</li><li>I&#x2F;O 接口类型</li><li>编址方式</li><li><strong>I&#x2F;O方式</strong><ul><li>程序查询方式</li><li>程序中断方式</li><li>DMA方式</li></ul></li></ul><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="I-x2F-O接口"><a href="#I-x2F-O接口" class="headerlink" title="I&#x2F;O接口"></a>I&#x2F;O接口</h4><p>“I&#x2F;O控制器”，主机与外设之间的接口，可实现主机与外设支架的信息交换</p><h4 id="I-x2F-O接口的功能"><a href="#I-x2F-O接口的功能" class="headerlink" title="I&#x2F;O接口的功能"></a>I&#x2F;O接口的功能</h4><ul><li><p>进行地址译码和设备选择</p></li><li><p>实现主机外设之间的通信联络控制</p></li><li><p>实现数据缓冲</p><blockquote><p>为消除速度差异，需设置数据缓冲寄存器，用于数据的暂存，以避免因速度不一致而丢失数据</p></blockquote></li><li><p>信号格式的转换</p></li><li><p>传送<strong>控制信息</strong>和<strong>状态信息</strong></p></li></ul><h4 id="I-x2F-O接口结构"><a href="#I-x2F-O接口结构" class="headerlink" title="I&#x2F;O接口结构"></a>I&#x2F;O接口结构</h4><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230916201128545.png" alt="image-20230916201128545" style="zoom: 40%;" /><p>状态寄存器，控制寄存器在传送方向上相反</p><p>地址线：给出要访问的IO接口中的寄存器的地址</p><p>控制线：传来读写信号确认是读寄存器还是写寄存器</p><p>IO控制逻辑：</p><ul><li>对寄存器控制器中的命令字进行译码，并将控制信息通过外设界面控制逻辑送到外设</li><li>将数据缓冲寄存器的数据发送到外设or反过来</li><li>还具有收集外设状态到寄存器的功能</li></ul><p>对接口中寄寄存器的访问是通过<code>I/O指令</code>来完成的</p><h4 id="I-x2F-O接口类型"><a href="#I-x2F-O接口类型" class="headerlink" title="I&#x2F;O接口类型"></a>I&#x2F;O接口类型</h4><p>$$ 数据传送方式\left{ \begin{matrix}并行接口\串行接口\end{matrix} \right. $$</p><p>$$ 主机访问I&#x2F;O设备的控制方式\left{ \begin{matrix}程序查询接口\ 中断接口\ DMA接口 \end{matrix} \right. $$</p><p>$$ 功能选择的灵活性\left{ \begin{matrix}可编程接口\不可编程接口\end{matrix} \right. $$</p><h4 id="I-x2F-O端口"><a href="#I-x2F-O端口" class="headerlink" title="I&#x2F;O端口"></a>I&#x2F;O端口</h4><p>接口电路中可以被CPU直接访问的寄存器</p><blockquote><p>IO端口与IO接口：</p><p>IO端口是指接口电路中可以进行读&#x2F;写的寄存器</p><p>若干端口 + 控制逻辑 &#x3D; 接口</p></blockquote><h4 id="I-x2F-O-端口编址方式"><a href="#I-x2F-O-端口编址方式" class="headerlink" title="I&#x2F;O 端口编址方式"></a>I&#x2F;O 端口编址方式</h4><ul><li><h2 id="统一编址（存储器映射方式）"><a href="#统一编址（存储器映射方式）" class="headerlink" title="统一编址（存储器映射方式）"></a>统一编址（存储器映射方式）</h2></li><li>独立编址（I&#x2F;O映射方式）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;二轮完整记录一些知识点与做题技巧&lt;/p&gt;
&lt;h2 id=&quot;第7章-I-x2F-O-系统&quot;&gt;&lt;a href=&quot;#第7章-I-x2F-O-系统&quot;</summary>
      
    
    
    
    
    <category term="408" scheme="https://www.bebella.cc/tags/408/"/>
    
  </entry>
  
  <entry>
    <title>科研绘图学习</title>
    <link href="https://www.bebella.cc/2023/08/20/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%AD%A6%E4%B9%A0/"/>
    <id>https://www.bebella.cc/2023/08/20/%E7%A7%91%E7%A0%94%E7%BB%98%E5%9B%BE%E5%AD%A6%E4%B9%A0/</id>
    <published>2023-08-20T12:54:26.000Z</published>
    <updated>2023-08-22T14:21:13.767Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一章-基础介绍"><a href="#第一章-基础介绍" class="headerlink" title="第一章 基础介绍"></a>第一章 基础介绍</h3><h4 id="1-分类与构成"><a href="#1-分类与构成" class="headerlink" title="1. 分类与构成"></a>1. 分类与构成</h4><p>根据呈现方式，可分为：线性图、灰度图、照片彩图和综合配图</p><p>科研论文配图主要包括 X 轴（X axis，又称横轴）、Y 轴（Y axis，又称纵轴）、X 轴标签（X axis label）、Y轴标签（Y axis label）、主刻度（Major tick）、次刻度（Minor tick）和图例（Legend） 等。（如图所示）</p><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230820205845465.png" alt="image-20230820205845465"></p><p>格式：</p><ul><li><p>像素图（一般要求不大于300dpi）</p><ul><li>JEPG</li><li>PSD</li><li>PNG</li><li>TIFF</li></ul></li><li><p>矢量图</p><ul><li><p>EPS （常用）</p></li><li><p>PDF （常用）</p></li><li><p>AI</p></li><li><p>SVG</p></li></ul></li></ul><p>字体：</p><ul><li>中文<ul><li>黑体</li><li>宋体</li></ul></li><li>英文科技期刊<ul><li>Arial</li><li>Helvetica</li><li>Times New Roman</li></ul></li></ul><p>版式设计：配图中文字的字体要保持一致，字号不大于正文字体的字号，行距、文字间距 应与正文协调一致</p><p>结构布局：先文后图</p><p>颜色搭配：</p><ul><li>相邻的图层元素不宜采用相近的颜色</li><li>避免过亮或过暗的颜色</li></ul><p>绘制原则：</p><ul><li>必要性</li><li>易读性</li><li>一致性</li></ul><h4 id="2-色彩相关"><a href="#2-色彩相关" class="headerlink" title="2. 色彩相关"></a>2. 色彩相关</h4><p>色彩模式</p><ul><li>RGB</li><li>CYMK</li><li>HEX</li></ul><h5 id="色轮（色环）配色"><a href="#色轮（色环）配色" class="headerlink" title="色轮（色环）配色"></a>色轮（色环）配色</h5><p>总览</p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/20/210605-447269.png" alt="image-20230820210539922"></p><ul><li>单色配色方案（monochromatic  color scheme）<ul><li>常被用于表示有直接关系、关系较为密切或同系列的数据。</li><li>注意：颜色3~5种较为合适</li><li><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/20/211109-877514.png" alt="image-20230820211108882"></li></ul></li><li>互补色配色方案（complementary color scheme）<ul><li>当只能使用两种颜色时</li><li>色轮上间隔 180°（相对） 的两种颜色为互补色，对比效果强烈。</li><li>可用于科研论文配图中观察组数 据和对照组数据的可视化表达</li><li><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/20/211105-249870.png" alt="image-20230820211053653"></li></ul></li><li>等距三角配色方案（triadic  color scheme）<ul><li>较少使用</li><li>将色轮上彼此间隔 120°的 3 种颜色进行组合。</li><li>将其中一种颜色选为主色，将另外两种颜色作为辅色</li><li><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230820211044578.png" alt="image-20230820211044578"></li></ul></li><li>四角配色方案（tetradic color scheme）<ul><li>少用，难平衡</li><li>优点是能够使配图的颜色更加丰富，缺点是使用时具有很大的挑战性，容易造成色彩杂乱</li></ul></li></ul><h5 id="颜色主题"><a href="#颜色主题" class="headerlink" title="颜色主题"></a>颜色主题</h5><p>matplotlib、seaborn自带颜色主题，可以直接用</p><blockquote><p>matplotlib主题一览：</p><p><a href="https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html">https://matplotlib.org/stable/gallery/style_sheets/style_sheets_reference.html</a> </p><p>seaborn主题一览：</p><p><a href="http://seaborn.pydata.org/tutorial/color_palettes.html#palette-tutorial">Choosing color palettes — seaborn 0.12.2 documentation (pydata.org)</a></p></blockquote><h5 id="配色工具"><a href="#配色工具" class="headerlink" title="配色工具"></a>配色工具</h5><ul><li>Color Scheme Designer 网站中的高级在线配色器</li><li>Adobe 旗下的在线配色工具 Adobe  Color </li><li>颜色主题搭配网站 ColorBrewer 2.0</li></ul><h3 id="第二章-绘制工具及其重要特征"><a href="#第二章-绘制工具及其重要特征" class="headerlink" title="第二章   绘制工具及其重要特征"></a>第二章   绘制工具及其重要特征</h3><h4 id="2-1-Matplotlib"><a href="#2-1-Matplotlib" class="headerlink" title="2.1 Matplotlib"></a>2.1 Matplotlib</h4><p>图形元素：</p><ul><li>画布 figure</li><li>坐标图形 axes</li><li>轴 axis</li><li>刻度 tick</li></ul><p>图层顺序：</p><ul><li>0: Images(AxesImage, FigureImage, BboxImage)</li><li>1: Patch &#x2F; PatchCollection</li><li>2: Line2D &#x2F; LineCollection</li><li>3: Text</li><li>4: Inset axes &amp; Legend</li></ul><p>轴对象：matplotlib中至少有两个（X, Y)</p><p>轴对象还可以控制轴比例（axis scale）、刻度位置（tick locator）和刻度格式（tick formatter）</p><ul><li>轴比例</li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221253-390677.png" alt="image-20230822221251787"></p><ul><li>刻度位置和刻度格式</li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221311-5093.png" alt="image-20230822221300403"></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221313-395601.png" alt="image-20230822221313306"></p><h5 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h5><ul><li>直角坐标系（rectangular coordinate system）</li><li>极坐标系（polar coordinate  system）<ul><li>极坐标系往往体现数据的周期性，即它可以更好地展示数据的周期性变化，这就要求数据 较为完整且有明显的周期性特征。</li></ul></li><li>地理坐标系（geographic coordinate system）<ul><li>投影方式：<ul><li>Aitoff 投影</li><li>Hammer 投影</li><li>Lambert 投影</li><li>Mollweide 投影</li></ul></li></ul></li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221348-840863.png" alt="image-20230822221347883"></p><h5 id="多子图"><a href="#多子图" class="headerlink" title="多子图"></a>多子图</h5><ul><li>subplot() 函数</li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221539-998023.png" alt="image-20230822221524823"></p><ul><li>add_subplot()函数</li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221553-523326.png" alt="image-20230822221552412"></p><ul><li>subplots()</li></ul><p><code>subplots(nrows, ncols, sharex, sharey)</code></p><ul><li>axes()<ul><li>rect[left, bottom, width, height]</li></ul></li></ul><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221722-520688.png" alt="image-20230822221721506"></p><ul><li>subplot2grid() 函数</li></ul><p>实现对不规则多子图的绘制</p><p><code>subplot2grid(shape, location, rowspan/colspan)</code></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221841-158995.png" alt="image-20230822221838043"></p><ul><li>gridspec.GridSpec() 函数</li></ul><p><code>gridspec.GridSpec(nrows, ncols, figure, left, bottom, right, top)</code></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221937-219603.png" alt="image-20230822221936733"></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/221943-799378.png" alt="image-20230822221943214"></p><ul><li><p>subplot_mosaic() 函数</p><p><code>subplot_mosaic(mosaic,…)</code></p></li></ul><p>常见绘图类型：</p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/222025-323024.png" alt="image-20230822222025210"></p><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/22/222044-345562.png" alt="image-20230822222044603"></p><h5 id="结果保存"><a href="#结果保存" class="headerlink" title="结果保存"></a>结果保存</h5><p>​<code>fig.savefig()</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;第一章-基础介绍&quot;&gt;&lt;a href=&quot;#第一章-基础介绍&quot; class=&quot;headerlink&quot; title=&quot;第一章 基础介绍&quot;&gt;&lt;/a&gt;第一章 基础介绍&lt;/h3&gt;&lt;h4 id=&quot;1-分类与构成&quot;&gt;&lt;a href=&quot;#1-分类与构成&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>贷款违约预测</title>
    <link href="https://www.bebella.cc/2023/08/12/%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B/"/>
    <id>https://www.bebella.cc/2023/08/12/%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B/</id>
    <published>2023-08-11T16:17:56.000Z</published>
    <updated>2023-08-11T16:19:45.880Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><h2 id="二、赛题理解"><a href="#二、赛题理解" class="headerlink" title="二、赛题理解"></a>二、赛题理解</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、介绍&quot;&gt;&lt;a href=&quot;#一、介绍&quot; class=&quot;headerlink&quot; title=&quot;一、介绍&quot;&gt;&lt;/a&gt;一、介绍&lt;/h2&gt;&lt;h2 id=&quot;二、赛题理解&quot;&gt;&lt;a href=&quot;#二、赛题理解&quot; class=&quot;headerlink&quot; title=&quot;二、赛题理</summary>
      
    
    
    
    <category term="ML/DL" scheme="https://www.bebella.cc/categories/ML-DL/"/>
    
    
    <category term="天池" scheme="https://www.bebella.cc/tags/%E5%A4%A9%E6%B1%A0/"/>
    
    <category term="竞赛" scheme="https://www.bebella.cc/tags/%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>算法竞赛入门知识</title>
    <link href="https://www.bebella.cc/2023/08/10/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/"/>
    <id>https://www.bebella.cc/2023/08/10/%E7%AE%97%E6%B3%95%E7%AB%9E%E8%B5%9B%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/</id>
    <published>2023-08-10T15:53:09.000Z</published>
    <updated>2023-08-11T16:16:51.191Z</updated>
    
    <content type="html"><![CDATA[<h2 id="竞赛中主要流程"><a href="#竞赛中主要流程" class="headerlink" title="竞赛中主要流程"></a>竞赛中主要流程</h2><h3 id="1-问题建模"><a href="#1-问题建模" class="headerlink" title="1. 问题建模"></a>1. 问题建模</h3><h4 id="赛题理解"><a href="#赛题理解" class="headerlink" title="赛题理解"></a>赛题理解</h4><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/234720-554409.png" alt="image-20230811234529981"></p><h4 id="线下验证"><a href="#线下验证" class="headerlink" title="线下验证"></a>线下验证</h4><p>提交次数有限，故需要自己在线下先验证。</p><h5 id="时序验证"><a href="#时序验证" class="headerlink" title="时序验证"></a>时序验证</h5><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/234845-401389.png" alt="image-20230811234830679"></p><h5 id="k折交叉验证"><a href="#k折交叉验证" class="headerlink" title="k折交叉验证"></a>k折交叉验证</h5><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/234851-952216.png" alt="image-20230811234848027"></p><h3 id="2-数据探索性分析"><a href="#2-数据探索性分析" class="headerlink" title="2. 数据探索性分析"></a>2. 数据探索性分析</h3><h4 id="了解数据"><a href="#了解数据" class="headerlink" title="了解数据"></a>了解数据</h4><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/234958-225046.png" alt="image-20230811234950193"></p><h4 id="为建模做准备"><a href="#为建模做准备" class="headerlink" title="为建模做准备"></a>为建模做准备</h4><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/235000-90926.png" alt="image-20230811234959872"></p><h4 id="EDA需要看"><a href="#EDA需要看" class="headerlink" title="EDA需要看"></a>EDA需要看</h4><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/235102-172757.png" alt="image-20230811235045800"></p><p>标签分布不平衡：过采样、欠采样      <a href="https://zhuanlan.zhihu.com/p/409547542">https://zhuanlan.zhihu.com/p/409547542</a></p><p>穿越问题相关：<a href="https://zhuanlan.zhihu.com/p/402812843">https://zhuanlan.zhihu.com/p/402812843</a></p><h3 id="3-特征工程"><a href="#3-特征工程" class="headerlink" title="3. 特征工程"></a>3. 特征工程</h3><h4 id="0-离群点处理"><a href="#0-离群点处理" class="headerlink" title="0. 离群点处理"></a>0. 离群点处理</h4><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/11/235654-354248.png" alt="image-20230811235616284"></p><p>处理方法：</p><ul><li>当作缺失值进行处理</li><li>删掉离群点所在样本</li><li>使用统计值进行填充</li></ul><h4 id="1-数据预处理"><a href="#1-数据预处理" class="headerlink" title="1. 数据预处理"></a>1. 数据预处理</h4><h5 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h5><p>真假缺失值</p><ul><li>真缺失值（对比选择）<ul><li>填充各种方案</li><li>不填充，设为np.nan</li></ul></li><li>假缺失值（有特定的业务含义）<ul><li>填充</li></ul></li></ul><h5 id="错误值处理"><a href="#错误值处理" class="headerlink" title="错误值处理"></a>错误值处理</h5><ul><li>明显错误</li><li>匿名比赛出现-1, 999，表示缺失值，替换np.nan</li></ul><h5 id="假标签处理"><a href="#假标签处理" class="headerlink" title="假标签处理"></a>假标签处理</h5><ul><li>标签错误</li><li>标签和评估的指标不一致<ul><li>log1p化，再用mse优化学习</li></ul></li></ul><h4 id="2-特征提取"><a href="#2-特征提取" class="headerlink" title="2. 特征提取"></a>2. 特征提取</h4><ul><li>类别特征<ul><li>编码方式<ul><li>自然数编码、one-hot编码、count编码（替代类别特征）、目标编码</li></ul></li><li>统计方式<ul><li>count、nunique（宽度）、ratio（偏好）</li></ul></li></ul></li><li>数值特征<ul><li>交叉统计<ul><li>行交叉（均值、中位数、最值）、业务交叉构造</li></ul></li><li>离散方式<ul><li>分桶、二值化（0&#x2F;1）</li></ul></li></ul></li><li>时间特征<ul><li><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/12/000945-832245.png" alt="image-20230812000940529"></li><li><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/12/001020-367245.png" alt="image-20230812001013063"></li></ul></li></ul><h4 id="3-特征选择"><a href="#3-特征选择" class="headerlink" title="3. 特征选择"></a>3. 特征选择</h4><ul><li>过滤法<ul><li>相关系数 + 卡方检验 + 互信息</li></ul></li><li>封装法<ul><li>前向搜索 + 后向搜索</li></ul></li><li>嵌入法<ul><li>基于学习模型的特征排序</li></ul></li></ul><h4 id="4-比赛常备模型："><a href="#4-比赛常备模型：" class="headerlink" title="4.比赛常备模型："></a>4.比赛常备模型：</h4><p><code>XGBoost</code>、<code>LightGBM</code></p><p>好处：对特征处理要求低；对类别和连续特征友好；缺失值不需要填充</p><h4 id="5-模型融合"><a href="#5-模型融合" class="headerlink" title="5. 模型融合"></a>5. 模型融合</h4><p><img src="https://bella-typora-1319711826.cos.ap-guangzhou.myqcloud.com/typora/202308/12/001540-395487.png" alt="image-20230812001532483"></p><p>样本扰动：构建不同的训练集，如用户购买行为预测，准确+召回。</p><p>不同特征组：相同模型，特征集不同，也能带来差异。</p><p>输出转换：训练目标不同，对label进行改变（log变换等）。分类与回归的转换。</p><p>参数调整：不同参数能够产生不同的结果，不同的随机种子，神经网络深度。</p><p>loss函数选择：选择使用不同损失函数进行训练的结果进行融合，如MSE对异常敏感，MAE结果集中在中间</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;竞赛中主要流程&quot;&gt;&lt;a href=&quot;#竞赛中主要流程&quot; class=&quot;headerlink&quot; title=&quot;竞赛中主要流程&quot;&gt;&lt;/a&gt;竞赛中主要流程&lt;/h2&gt;&lt;h3 id=&quot;1-问题建模&quot;&gt;&lt;a href=&quot;#1-问题建模&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="ML/DL" scheme="https://www.bebella.cc/categories/ML-DL/"/>
    
    
    <category term="天池" scheme="https://www.bebella.cc/tags/%E5%A4%A9%E6%B1%A0/"/>
    
    <category term="竞赛" scheme="https://www.bebella.cc/tags/%E7%AB%9E%E8%B5%9B/"/>
    
  </entry>
  
  <entry>
    <title>考研日记</title>
    <link href="https://www.bebella.cc/2023/07/18/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/"/>
    <id>https://www.bebella.cc/2023/07/18/%E8%80%83%E7%A0%94%E6%97%A5%E8%AE%B0/</id>
    <published>2023-07-18T01:20:40.000Z</published>
    <updated>2023-08-31T16:36:02.049Z</updated>
    
    <content type="html"><![CDATA[<h3 id="20230831"><a href="#20230831" class="headerlink" title="20230831"></a>20230831</h3><p>是回学校的第一天，总结了一下接下来的计划，好好学习！</p><p>ps 今天也解决矛盾了（可能吧</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;20230831&quot;&gt;&lt;a href=&quot;#20230831&quot; class=&quot;headerlink&quot; title=&quot;20230831&quot;&gt;&lt;/a&gt;20230831&lt;/h3&gt;&lt;p&gt;是回学校的第一天，总结了一下接下来的计划，好好学习！&lt;/p&gt;
&lt;p&gt;ps 今天也解决矛盾了（</summary>
      
    
    
    
    
    <category term="考研" scheme="https://www.bebella.cc/tags/%E8%80%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>【算法】双链表</title>
    <link href="https://www.bebella.cc/2023/07/06/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%8F%8C%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.bebella.cc/2023/07/06/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%8F%8C%E9%93%BE%E8%A1%A8/</id>
    <published>2023-07-06T13:00:56.000Z</published>
    <updated>2023-07-06T13:23:08.030Z</updated>
    
    <content type="html"><![CDATA[<h3 id="827-双链表"><a href="#827-双链表" class="headerlink" title="827. 双链表"></a>827. 双链表</h3><p>实现一个双链表，双链表初始为空，支持 55 种操作：</p><ol><li>在最左侧插入一个数；</li><li>在最右侧插入一个数；</li><li>将第 k  个插入的数删除；</li><li>在第 k  个插入的数左侧插入一个数；</li><li>在第 k  个插入的数右侧插入一个数</li></ol><p>现在要对该链表进行 M  次操作，进行完所有操作后，从左到右输出整个链表。</p><p><strong>注意</strong>:题目中第 k  个插入的数并不是指当前链表的第 k  个数。例如操作过程中一共插入了 n  个数，则按照插入的时间顺序，这 n  个数依次为：第 11 个插入的数，第 22 个插入的数，…第 n  个插入的数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M ，表示操作次数。</p><p>接下来 M  行，每行包含一个操作命令，操作命令可能为以下几种：</p><ol><li><code>L x</code>，表示在链表的最左端插入数 x 。</li><li><code>R x</code>，表示在链表的最右端插入数 x 。</li><li><code>D k</code>，表示将第 k  个插入的数删除。</li><li><code>IL k x</code>，表示在第 k  个插入的数左侧插入一个数。</li><li><code>IR k x</code>，表示在第 k  个插入的数右侧插入一个数。</li></ol><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，将整个链表从左到右输出。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤1000001≤ ≤100000<br>所有操作保证合法。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">R 7</span><br><span class="line">D 1</span><br><span class="line">L 3</span><br><span class="line">IL 2 10</span><br><span class="line">D 3</span><br><span class="line">IL 2 7</span><br><span class="line">L 8</span><br><span class="line">R 9</span><br><span class="line">IL 4 7</span><br><span class="line">IR 2 2</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">8 7 7 3 2 9</span><br></pre></td></tr></table></figure><h4 id="和单链表的不同："><a href="#和单链表的不同：" class="headerlink" title="和单链表的不同："></a>和单链表的不同：</h4><p><code>ne</code>变成了<code>l[]</code>和<code>r[]</code>，左右两个指针。</p><p>进行增加、删除操作时需要注意先后顺序。</p><p>初始化时，将0,1分别定为头节点和尾节点。</p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> m;</span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">// 0表示最左侧，1表示右端点</span></span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">1</span>, l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在下标k出右边插入</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    l[idx] = k;</span><br><span class="line">    r[idx] = r[k];</span><br><span class="line">    l[r[k]] = idx;</span><br><span class="line">    r[k] = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第k个点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    r[l[k]] = r[k];</span><br><span class="line">    l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="comment">// 操作符 用字符表示</span></span><br><span class="line">        string op;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&quot;R&quot;</span>)&#123;</span><br><span class="line">            <span class="comment">// 插入最右边</span></span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(l[<span class="number">1</span>], x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;L&quot;</span>)&#123;</span><br><span class="line">            <span class="comment">// 插入最左边</span></span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(<span class="number">0</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;D&quot;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="built_in">remove</span>(k + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&quot;IL&quot;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(l[k + <span class="number">1</span>], x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add</span>(k + <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = r[<span class="number">0</span>]; i != <span class="number">1</span>; i = r[i]) cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;827-双链表&quot;&gt;&lt;a href=&quot;#827-双链表&quot; class=&quot;headerlink&quot; title=&quot;827. 双链表&quot;&gt;&lt;/a&gt;827. 双链表&lt;/h3&gt;&lt;p&gt;实现一个双链表，双链表初始为空，支持 55 种操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在最左侧插入一个</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bebella.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="编程" scheme="https://www.bebella.cc/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="AcWing" scheme="https://www.bebella.cc/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>【算法】单链表</title>
    <link href="https://www.bebella.cc/2023/07/06/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8/"/>
    <id>https://www.bebella.cc/2023/07/06/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E5%8D%95%E9%93%BE%E8%A1%A8/</id>
    <published>2023-07-06T12:11:44.000Z</published>
    <updated>2023-07-06T13:00:28.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="826-单链表"><a href="#826-单链表" class="headerlink" title="826. 单链表"></a>826. 单链表</h3><p>实现一个单链表，链表初始为空，支持三种操作：</p><ol><li>向链表头插入一个数；</li><li>删除第 k 个插入的数后面的数；</li><li>在第 k 个插入的数后插入一个数。</li></ol><p>现在要对该链表进行 M 次操作，进行完所有操作后，从头到尾输出整个链表。</p><p><strong>注意</strong>:题目中第 k  个插入的数并不是指当前链表的第 k  个数。例如操作过程中一共插入了 n  个数，则按照插入的时间顺序，这 n  个数依次为：第 11 个插入的数，第 22 个插入的数，…第 n  个插入的数。</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 M ，表示操作次数。</p><p>接下来 M  行，每行包含一个操作命令，操作命令可能为以下几种：</p><ol><li><code>H x</code>，表示向链表头插入一个数 x 。</li><li><code>D k</code>，表示删除第 k  个插入的数后面的数（当 k  为 00 时，表示删除头结点）。</li><li><code>I k x</code>，表示在第 k  个插入的数后面插入一个数 x （此操作中 k  均大于 00）。</li></ol><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，将整个链表从头到尾输出。</p><h4 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤M≤1000001≤ ≤100000<br>所有操作保证合法。</p><h4 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">H 9</span><br><span class="line">I 1 1</span><br><span class="line">D 1</span><br><span class="line">D 0</span><br><span class="line">H 6</span><br><span class="line">I 3 6</span><br><span class="line">I 4 5</span><br><span class="line">I 4 5</span><br><span class="line">I 3 4</span><br><span class="line">D 6</span><br></pre></td></tr></table></figure><h4 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6 4 6 5</span><br></pre></td></tr></table></figure><h4 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h4><p>本题的根本要求：构造一个单链表，并最后输出这个链表的元素。</p><p>核心思路：数组来模拟链表。</p><p>共有三种操作：</p><ol><li>向链表头插入一个数；</li><li>删除第 k 个插入的数后面的数；</li><li>在第 k 个插入的数后插入一个数。</li></ol><p>核心思路：数组来模拟链表。</p><h5 id="符号说明："><a href="#符号说明：" class="headerlink" title="符号说明："></a>符号说明：</h5><p>用<code>e[N]</code>，<code>ne[N]</code>分别表示该点的值和下一个指针。<code>ne[]</code>的值直接指向数组下标。</p><p><code>head</code>表示头节点，<code>idx</code>存储现在已经用到的点</p><h5 id="具体过程："><a href="#具体过程：" class="headerlink" title="具体过程："></a>具体过程：</h5><p>1. </p><h4 id="AC代码："><a href="#AC代码：" class="headerlink" title="AC代码："></a>AC代码：</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// head 头节点的下标</span></span><br><span class="line"><span class="comment">// e[i] 节点i的值</span></span><br><span class="line"><span class="comment">// ne[i] 表示i的next指针</span></span><br><span class="line"><span class="comment">// idx 存储已经用到的节点</span></span><br><span class="line"><span class="type">int</span> head, e[N], ne[N], idx;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    head = <span class="number">-1</span>;</span><br><span class="line">    idx = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// x插入头节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_head</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x;</span><br><span class="line">    ne[idx] = head;</span><br><span class="line">    head = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第k个插入的书后面的数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add_to_k</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    e[idx] = x; </span><br><span class="line">    ne[idx] = ne[k]; </span><br><span class="line">    ne[k] = idx;</span><br><span class="line">    idx ++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第k插入数后面的数</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    ne[k] = ne[ne[k]];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> m;</span><br><span class="line">    cin &gt;&gt; m;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">init</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(m --)&#123;</span><br><span class="line">        <span class="type">int</span> k, x;</span><br><span class="line">        <span class="comment">// 操作符 用字符表示</span></span><br><span class="line">        <span class="type">char</span> op;</span><br><span class="line"></span><br><span class="line">        cin &gt;&gt; op;</span><br><span class="line">        <span class="keyword">if</span> (op == <span class="string">&#x27;H&#x27;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_head</span>(x);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="comment">// 若删除的是头节点</span></span><br><span class="line">            <span class="keyword">if</span> (!k) head = ne[head];</span><br><span class="line">            <span class="built_in">remove</span>(k - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">            <span class="built_in">add_to_k</span>(k - <span class="number">1</span>, x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = head; i != <span class="number">-1</span>; i = ne[i])&#123;</span><br><span class="line">        cout &lt;&lt; e[i] &lt;&lt; <span class="string">&#x27; &#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="其他问题："><a href="#其他问题：" class="headerlink" title="其他问题："></a>其他问题：</h4><ol><li><p>为什么不用结构体实现而用数组？</p><p>结构体new的耗时长，容易超时。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;826-单链表&quot;&gt;&lt;a href=&quot;#826-单链表&quot; class=&quot;headerlink&quot; title=&quot;826. 单链表&quot;&gt;&lt;/a&gt;826. 单链表&lt;/h3&gt;&lt;p&gt;实现一个单链表，链表初始为空，支持三种操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;向链表头插入一个数；&lt;/</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bebella.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="编程" scheme="https://www.bebella.cc/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="AcWing" scheme="https://www.bebella.cc/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>【算法】KMP算法</title>
    <link href="https://www.bebella.cc/2023/07/01/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91KMP%E7%AE%97%E6%B3%95/"/>
    <id>https://www.bebella.cc/2023/07/01/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91KMP%E7%AE%97%E6%B3%95/</id>
    <published>2023-07-01T13:56:27.000Z</published>
    <updated>2023-07-01T14:32:02.703Z</updated>
    
    <content type="html"><![CDATA[<h2 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h2><h3 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h3><p>KMP 算法（Knuth-Morris-Pratt 算法）是一个著名的字符串匹配算法，效率高。</p><p>首先约定：<code>pat</code>表示模式串，长度为<code>M</code>，文本串为<code>txt</code>，文本串长度为<code>N</code>。</p><p>KMP算法即在文本串<code>txt</code>中匹配子串<code>pat</code>；若存在， 返回这个子串的起始索引，否则返回-1。</p><h3 id="二、KMP算法概述"><a href="#二、KMP算法概述" class="headerlink" title="二、KMP算法概述"></a>二、KMP算法概述</h3><h4 id="暴力算法"><a href="#暴力算法" class="headerlink" title="暴力算法"></a>暴力算法</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 暴力匹配（伪码）</span><br><span class="line">int search(String pat, String txt) &#123;</span><br><span class="line">    int M = pat.length; </span><br><span class="line">    int N = txt.length;</span><br><span class="line">    for (int i = 0; i &lt;= N - M; i++) &#123;</span><br><span class="line">        int j;</span><br><span class="line">        for (j = 0; j &lt; M; j++) &#123;</span><br><span class="line">            if (pat[j] != txt[i+j]) // 匹配不上</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        // pat 全都匹配了</span><br><span class="line">        if (j == M) return i;</span><br><span class="line">    &#125;</span><br><span class="line">    // txt 中不存在 pat 子串</span><br><span class="line">    return -1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于暴力算法，如果出现不匹配字符，同时回退 <code>txt</code> 和 <code>pat</code> 的指针，嵌套 for 循环，时间复杂度 <code>O(MN)</code>，空间复杂度<code>O(1)</code>。最主要的问题是，如果字符串中重复的字符比较多，暴力解法明显多做了很多不必要的操作，耗时长。</p><p>而KMPP算法会花费空间来记录一些信息，加快匹配。</p><p><strong>KMP 算法永不回退 <code>txt</code> 的指针 <code>i</code>，不走回头路（不会重复扫描 <code>txt</code>），而是借助 <code>dp</code> 数组中储存的信息把 <code>pat</code> 移到正确的位置继续匹配</strong>，时间复杂度只需 O(N)，用空间换时间，所以可以看做是一种动态规划算法。</p><p>KMP算法的关键：如何计算<code>dp</code>数组中的信息，如何移动<code>pat</code>的指针。</p><p>&#x3D;&gt; 利用<u><strong>确定有限状态自动机</strong></u></p><hr><p>参考链接：</p><ol><li><p><a href="https://zhuanlan.zhihu.com/p/83334559">KMP 算法详解 - 知乎 (zhihu.com)</a></p></li><li></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;KMP算法&quot;&gt;&lt;a href=&quot;#KMP算法&quot; class=&quot;headerlink&quot; title=&quot;KMP算法&quot;&gt;&lt;/a&gt;KMP算法&lt;/h2&gt;&lt;h3 id=&quot;一、简介&quot;&gt;&lt;a href=&quot;#一、简介&quot; class=&quot;headerlink&quot; title=&quot;一、简介&quot;</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bebella.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="https://www.bebella.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="编程" scheme="https://www.bebella.cc/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>【自然语言处理】三国演义分析</title>
    <link href="https://www.bebella.cc/2023/05/08/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89%E5%88%86%E6%9E%90/"/>
    <id>https://www.bebella.cc/2023/05/08/%E3%80%90%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E5%A4%84%E7%90%86%E3%80%91%E4%B8%89%E5%9B%BD%E6%BC%94%E4%B9%89%E5%88%86%E6%9E%90/</id>
    <published>2023-05-08T11:15:28.000Z</published>
    <updated>2023-07-01T13:49:00.034Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-摘要（作业题目描述）"><a href="#1-摘要（作业题目描述）" class="headerlink" title="1. 摘要（作业题目描述）"></a>1. 摘要（作业题目描述）</h3><h3 id="2-算法分析"><a href="#2-算法分析" class="headerlink" title="2. 算法分析"></a>2. 算法分析</h3><h4 id="2-1-出场人物频率"><a href="#2-1-出场人物频率" class="headerlink" title="2.1 出场人物频率"></a>2.1 出场人物频率</h4><p>a) 构建一个非人名集合，用于下面统计词频时排除不是人名的单词；<br>b) 对《三国演义》文本利用jieba包进行分词；<br>c) 定义一个字典去存储分词结果和出现的次数；<br>d) 在统计词频时，由于长度为1的单词大概率不是人名，因此忽略长度为1的词；<br>e) 同时，某些人物会具有多个名字，因此对这些人物的不同名字需要分开判断；<br>f) 把字典中一些不是人名的词语排除掉；<br>g) 根据字典的键值进行排序；<br>h) 最后格式化输出结果并通过matplotlib将结果可视化。<br><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230508215142614.png" alt="image-20230508215142614"></p><h4 id="2-2-词频分析"><a href="#2-2-词频分析" class="headerlink" title="2.2  词频分析"></a>2.2  词频分析</h4><p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20230508223312492.png" alt="image-20230508223312492"></p><h4 id="2-3-人物关系网络的探索"><a href="#2-3-人物关系网络的探索" class="headerlink" title="2.3 人物关系网络的探索"></a>2.3 人物关系网络的探索</h4><h4 id="2-4-章节标题命名实体识别以及实体关系抽取"><a href="#2-4-章节标题命名实体识别以及实体关系抽取" class="headerlink" title="2.4 章节标题命名实体识别以及实体关系抽取"></a>2.4 章节标题命名实体识别以及实体关系抽取</h4><hr><p>参考资料：</p><ol><li><p>Python-人物词频统计-jieba库-三国演义</p><p><a href="https://blog.csdn.net/q1694222672/article/details/82014385">https://blog.csdn.net/q1694222672/article/details/82014385</a></p></li><li><p>python 绘制三国演义人物关系图</p><p><a href="https://blog.csdn.net/wei_zhen_dong/article/details/103586780">https://blog.csdn.net/wei_zhen_dong/article/details/103586780</a></p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1-摘要（作业题目描述）&quot;&gt;&lt;a href=&quot;#1-摘要（作业题目描述）&quot; class=&quot;headerlink&quot; title=&quot;1. 摘要（作业题目描述）&quot;&gt;&lt;/a&gt;1. 摘要（作业题目描述）&lt;/h3&gt;&lt;h3 id=&quot;2-算法分析&quot;&gt;&lt;a href=&quot;#2-算法分</summary>
      
    
    
    
    <category term="课程作业" scheme="https://www.bebella.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="python" scheme="https://www.bebella.cc/tags/python/"/>
    
    <category term="NLP" scheme="https://www.bebella.cc/tags/NLP/"/>
    
  </entry>
  
  <entry>
    <title>【雅思】口语</title>
    <link href="https://www.bebella.cc/2023/05/05/%E3%80%90%E9%9B%85%E6%80%9D%E3%80%91%E5%8F%A3%E8%AF%AD/"/>
    <id>https://www.bebella.cc/2023/05/05/%E3%80%90%E9%9B%85%E6%80%9D%E3%80%91%E5%8F%A3%E8%AF%AD/</id>
    <published>2023-05-05T10:54:18.000Z</published>
    <updated>2023-07-01T13:48:16.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><h2 id="Part-1"><a href="#Part-1" class="headerlink" title="Part 1"></a>Part 1</h2><h3 id="“do”，”did-“-”does”类问题"><a href="#“do”，”did-“-”does”类问题" class="headerlink" title="“do”，”did “,”does”类问题"></a>“do”，”did “,”does”类问题</h3><p>肯定回答：<br>Sure, absolutely<br>Oh, yeah, for sure<br>Yeah, I do actually<br>Sure, I can’t get enough of……</p><p>否定回答：<br>No, not for me<br>No, not at all<br>No, it’s not my favorite thing in the world<br>no, it’s not up my street actually</p><h3 id="雅思口语考试现场没听懂"><a href="#雅思口语考试现场没听懂" class="headerlink" title="雅思口语考试现场没听懂"></a>雅思口语考试现场没听懂</h3><p>I’m sorry, I didn’t follow&#x2F;catch it.  或者I didn’t get it.</p><p>Can you paraphrase&#x2F;rephrase it? </p><p>不要说Pardon</p><h2 id="Part-2"><a href="#Part-2" class="headerlink" title="Part 2"></a>Part 2</h2><h2 id="Part-3"><a href="#Part-3" class="headerlink" title="Part 3"></a>Part 3</h2><h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ol><li>声音要大、音调起伏</li><li>语速要慢：自信、稳重、流出时间思考</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Introduction&quot;&gt;&lt;a href=&quot;#Introduction&quot; class=&quot;headerlink&quot; title=&quot;Introduction&quot;&gt;&lt;/a&gt;Introduction&lt;/h2&gt;&lt;h2 id=&quot;Part-1&quot;&gt;&lt;a href=&quot;#Part-1&quot;</summary>
      
    
    
    
    <category term="英语" scheme="https://www.bebella.cc/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="雅思" scheme="https://www.bebella.cc/tags/%E9%9B%85%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>【雅思】 顾家北写作</title>
    <link href="https://www.bebella.cc/2023/04/08/%E3%80%90%E9%9B%85%E6%80%9D%E3%80%91%E9%A1%BE%E5%AE%B6%E5%8C%97%E5%86%99%E4%BD%9C/"/>
    <id>https://www.bebella.cc/2023/04/08/%E3%80%90%E9%9B%85%E6%80%9D%E3%80%91%E9%A1%BE%E5%AE%B6%E5%8C%97%E5%86%99%E4%BD%9C/</id>
    <published>2023-04-08T05:48:24.000Z</published>
    <updated>2023-07-01T13:48:08.313Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Task1"><a href="#Task1" class="headerlink" title="Task1"></a>Task1</h2><h3 id="动态图"><a href="#动态图" class="headerlink" title="动态图"></a>动态图</h3><h4 id="1-线图"><a href="#1-线图" class="headerlink" title="1. 线图"></a>1. 线图</h4><h4 id="2-线图，有预测值"><a href="#2-线图，有预测值" class="headerlink" title="2. 线图，有预测值"></a>2. 线图，有预测值</h4><p>不要加入揣测、建议，按照图上的说就行</p><ul><li>line graph 线图</li><li>throughout the period 贯穿整个时期</li><li>fluctuation(s) 可以有复数</li></ul><h4 id="3-饼图，百分比"><a href="#3-饼图，百分比" class="headerlink" title="3. 饼图，百分比"></a>3. 饼图，百分比</h4><ul><li><p>pie chart</p></li><li><p>present the finding of  a survey about ……</p></li><li><p>next consideration 次要考虑</p></li><li><p>different patterns were seen in the changes to the other n factors …. （段落衔接，表示：与前面不同的是）</p></li><li><p>fivefold 五倍 &#x3D;&gt; nfold n倍</p></li><li><p>triple 三倍</p></li><li><p>tertiary education 高等教育</p></li><li><p>access to the amenities and sports facilities 便利设施和体育设施</p></li></ul><h4 id="4-表格"><a href="#4-表格" class="headerlink" title="4. 表格"></a>4. 表格</h4><ul><li>table</li><li>provide information about …. 提供xxx的信息</li><li>rise 通常是好的提升</li><li>noticeably 显著的</li><li>worsening 坏的提升、恶化 adj.</li></ul><h4 id="5-amp-6-饼图，两组描述对象"><a href="#5-amp-6-饼图，两组描述对象" class="headerlink" title="5&amp;6. 饼图，两组描述对象"></a>5&amp;6. 饼图，两组描述对象</h4><ul><li>projected figures 预测的图</li><li>biggest one &#x2F; sector &#x2F; section&#x2F; slice of pie</li></ul><h4 id="7-柱状图，两组描述对象"><a href="#7-柱状图，两组描述对象" class="headerlink" title="7. 柱状图，两组描述对象"></a>7. 柱状图，两组描述对象</h4><ul><li>respectively</li></ul><h3 id="静态图"><a href="#静态图" class="headerlink" title="静态图"></a>静态图</h3><h4 id="1-柱状图"><a href="#1-柱状图" class="headerlink" title="1 柱状图"></a>1 柱状图</h4><ul><li>Similarly</li><li>around twice as high as the figure for women</li><li>xx gap</li><li>xx were favoured by a larger proportion of female students</li><li>the .. difference was less clear  区别不明显 &#x2F; 差别不大</li></ul><h4 id="2-饼图-多图"><a href="#2-饼图-多图" class="headerlink" title="2 饼图 + 多图"></a>2 饼图 + 多图</h4><ul><li>the chart and the table provide information on the main reasons for ……</li><li>xxx has the greatest impact on …, two other major causes are…</li></ul><h4 id="3-柱状图-多图"><a href="#3-柱状图-多图" class="headerlink" title="3 柱状图 + 多图"></a>3 柱状图 + 多图</h4><ul><li>the vast majority of …, compared with ….</li></ul><h3 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Task1&quot;&gt;&lt;a href=&quot;#Task1&quot; class=&quot;headerlink&quot; title=&quot;Task1&quot;&gt;&lt;/a&gt;Task1&lt;/h2&gt;&lt;h3 id=&quot;动态图&quot;&gt;&lt;a href=&quot;#动态图&quot; class=&quot;headerlink&quot; title=&quot;动态图&quot;&gt;&lt;/</summary>
      
    
    
    
    <category term="英语" scheme="https://www.bebella.cc/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="雅思" scheme="https://www.bebella.cc/tags/%E9%9B%85%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>【专业课】数据结构</title>
    <link href="https://www.bebella.cc/2023/04/07/%E3%80%90%E4%B8%93%E4%B8%9A%E8%AF%BE%E3%80%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    <id>https://www.bebella.cc/2023/04/07/%E3%80%90%E4%B8%93%E4%B8%9A%E8%AF%BE%E3%80%91%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id>
    <published>2023-04-07T11:36:34.000Z</published>
    <updated>2023-04-07T11:55:46.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第2章-线性表"><a href="#第2章-线性表" class="headerlink" title="第2章 线性表"></a>第2章 线性表</h2><h3 id="2-1-线性表类型定义"><a href="#2-1-线性表类型定义" class="headerlink" title="2.1  线性表类型定义"></a>2.1  线性表类型定义</h3><h3 id="2-2-线性表的顺序表示和实现"><a href="#2-2-线性表的顺序表示和实现" class="headerlink" title="2.2 线性表的顺序表示和实现"></a>2.2 线性表的顺序表示和实现</h3><h3 id="2-3-线性表的链式表示和实现"><a href="#2-3-线性表的链式表示和实现" class="headerlink" title="2.3 线性表的链式表示和实现"></a>2.3 线性表的链式表示和实现</h3><h3 id="2-4-一元多项式的表示及相加"><a href="#2-4-一元多项式的表示及相加" class="headerlink" title="2.4 一元多项式的表示及相加"></a>2.4 一元多项式的表示及相加</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;第2章-线性表&quot;&gt;&lt;a href=&quot;#第2章-线性表&quot; class=&quot;headerlink&quot; title=&quot;第2章 线性表&quot;&gt;&lt;/a&gt;第2章 线性表&lt;/h2&gt;&lt;h3 id=&quot;2-1-线性表类型定义&quot;&gt;&lt;a href=&quot;#2-1-线性表类型定义&quot; class=&quot;he</summary>
      
    
    
    
    
    <category term="专业课" scheme="https://www.bebella.cc/tags/%E4%B8%93%E4%B8%9A%E8%AF%BE/"/>
    
    <category term="数据结构" scheme="https://www.bebella.cc/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【雅思】刘洪波阅读</title>
    <link href="https://www.bebella.cc/2023/03/25/%E3%80%90%E9%9B%85%E6%80%9D%E3%80%91%E5%88%98%E6%B4%AA%E6%B3%A2%E9%98%85%E8%AF%BB/"/>
    <id>https://www.bebella.cc/2023/03/25/%E3%80%90%E9%9B%85%E6%80%9D%E3%80%91%E5%88%98%E6%B4%AA%E6%B3%A2%E9%98%85%E8%AF%BB/</id>
    <published>2023-03-25T11:57:09.000Z</published>
    <updated>2023-07-01T13:48:30.452Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Before-Class"><a href="#Before-Class" class="headerlink" title="Before Class"></a>Before Class</h2><ul><li>看文章最重要的一般是<strong>第二段和最后一段</strong></li></ul><h2 id="Lecture-1-总纲、单词题"><a href="#Lecture-1-总纲、单词题" class="headerlink" title="Lecture 1 总纲、单词题"></a>Lecture 1 总纲、单词题</h2><h3 id="阅读方法"><a href="#阅读方法" class="headerlink" title="阅读方法"></a>阅读方法</h3><ul><li>雅思阅读文章特点：要<strong>读得快</strong>，否则理解力会下降。<ul><li>扩大视距</li><li>变速：读的懂的慢，不懂的快速通过</li><li>跳读：重点读认识的，能理解的；不认识的跳过</li></ul></li></ul><h3 id="3类vocabulary"><a href="#3类vocabulary" class="headerlink" title="3类vocabulary"></a>3类vocabulary</h3><p>题干中：account, suggestopedia, resemble</p><p><strong>如何知道自己的词汇量是否达到7分最低标准：</strong>1-13题，看题干（包括选项），3个不认识的单词，说明达标</p><ul><li>文章的主题词：没关系（能猜出来</li><li>模板词：belike: reference, detail</li></ul><blockquote><p>这类词，不会的题干中的重要的词，记下来自己背</p></blockquote><ul><li>考点词：必背！eg: resemble</li></ul><h3 id="3类Keywords"><a href="#3类Keywords" class="headerlink" title="3类Keywords"></a>3类Keywords</h3><p>！警惕：看题、画keywords -&gt; 看文章 -&gt; 再看题选答案</p><ul><li>直接读两遍题目，画出keywords，再读原文找答案。读懂了题目再找答案。</li></ul><p>Heading题：段落中</p><p>keywords：</p><ul><li>眼球级：大写、数字</li><li>朴素级：最简单的词，和高级一点的匹配</li><li>逻辑关系词：并列、转折、因果<ul><li>题目中有逻辑词，原文中必有类似表达</li></ul></li></ul><h3 id="总纲标注法"><a href="#总纲标注法" class="headerlink" title="总纲标注法"></a>总纲标注法</h3><p>反对<strong>精读</strong>，强调<strong>快速、对比</strong>阅读</p><p>总纲标注法（对比阅读法）：画出所有题干和原文的同义词替换</p><p>一开始不用在意时间，先做对，再慢慢变快。</p><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>以剑7, p18 为例</p><ol><li>看标题</li><li>看题型分布（匹配、summary、单词）【要知道每个题考的是是顺序还是伦旭】</li><li>精读匹配题目两遍，然后画keywords &#x3D;&gt; 接着看summary</li><li>summary看到blind，作为keywords读A，若A中无blind，说明A段只能是1-5题 &#x3D;&gt; 选一个匹配</li></ol><h2 id="Lecture-2-句子题"><a href="#Lecture-2-句子题" class="headerlink" title="Lecture 2 句子题"></a>Lecture 2 句子题</h2><p><strong>夹心饼干原则</strong>：</p><p>填空题：不是为了考察这个空，本质要注意空格前后 </p><p><strong>看不懂怎么办</strong>：</p><p>找keywords前后3行（前中后），不会的大概率是你看不懂的单词的同义词</p><p><strong>多选题：</strong></p><p>先读题，然后在文中找对应的部分，再细读找答案</p><p><strong>做题顺序：</strong></p><p>先细节题后大意题</p><h3 id="TFNG-x2F-Multiple-Choice："><a href="#TFNG-x2F-Multiple-Choice：" class="headerlink" title="TFNG &#x2F; Multiple Choice："></a>TFNG &#x2F; Multiple Choice：</h3><p>自看同义词替换</p><p><strong>True:</strong> </p><p>一般都是原文改写，注意原词替换</p><ul><li>针对一个句子true</li><li>针对上下文</li><li>针对上下文归纳出题（少见、难）</li></ul><p><strong>False：</strong></p><ul><li><p>出反义词</p></li><li><p>关系驳斥</p></li></ul><p><strong>Not Given：</strong></p><ul><li>题干信息不存在</li><li>题干中描述的关系不存在（有A有B但关系不对）</li></ul><h2 id="Lecture-3-段落题"><a href="#Lecture-3-段落题" class="headerlink" title="Lecture 3 段落题"></a>Lecture 3 段落题</h2><h2 id="Lecture-4-匹配题"><a href="#Lecture-4-匹配题" class="headerlink" title="Lecture 4 匹配题"></a>Lecture 4 匹配题</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;Before-Class&quot;&gt;&lt;a href=&quot;#Before-Class&quot; class=&quot;headerlink&quot; title=&quot;Before Class&quot;&gt;&lt;/a&gt;Before Class&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;看文章最重要的一般是&lt;strong&gt;第二段和最后</summary>
      
    
    
    
    <category term="英语" scheme="https://www.bebella.cc/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="雅思" scheme="https://www.bebella.cc/tags/%E9%9B%85%E6%80%9D/"/>
    
  </entry>
  
  <entry>
    <title>【算法】Acwing_算法基础(一)</title>
    <link href="https://www.bebella.cc/2023/03/06/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91Acwing_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80(%E4%B8%80)/"/>
    <id>https://www.bebella.cc/2023/03/06/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91Acwing_%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80(%E4%B8%80)/</id>
    <published>2023-03-06T08:56:26.000Z</published>
    <updated>2023-07-01T13:58:20.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h3><h4 id="Acwing-791-高精度加法"><a href="#Acwing-791-高精度加法" class="headerlink" title="Acwing 791. 高精度加法"></a>Acwing 791. 高精度加法</h4><p>给定两个正整数（不含前导 00），计算它们的和。</p><h5 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h5><p>共两行，每行包含一个整数。</p><h5 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h5><p>共一行，包含所求的和。</p><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><p>1≤整数长度≤1000001≤整数长度≤100000</p><h5 id="输入样例："><a href="#输入样例：" class="headerlink" title="输入样例："></a>输入样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">23</span><br></pre></td></tr></table></figure><h5 id="输出样例："><a href="#输出样例：" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">35</span><br></pre></td></tr></table></figure><h5 id="分析："><a href="#分析：" class="headerlink" title="分析："></a>分析：</h5><ol><li>大整数的存储：用数组，倒着存。</li><li>用 <code>t</code> 存储进位。</li></ol><h5 id="Answer："><a href="#Answer：" class="headerlink" title="Answer："></a>Answer：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义加法方式</span></span><br><span class="line"> <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(t%<span class="number">10</span>);</span><br><span class="line"><span class="comment">//        t&gt;10， 需要进位</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//  如果最后还需要进位</span></span><br><span class="line">    <span class="keyword">if</span> (t) C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 比较长，故用字符串表示</span></span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设 a = &quot;123456&quot;</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// A = [6, 5,4,3,2,1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">add</span>(A , B);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    print， 因为是倒着存的，所以要倒着输出</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AcWing-792-高精度减法"><a href="#AcWing-792-高精度减法" class="headerlink" title="AcWing 792. 高精度减法"></a>AcWing 792. 高精度减法</h4><p>给定两个正整数（不含前导 00），计算它们的差，计算结果可能为负数。</p><h5 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h5><p>共两行，每行包含一个整数。</p><h5 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h5><p>共一行，包含所求的差。</p><h5 id="数据范围-1"><a href="#数据范围-1" class="headerlink" title="数据范围"></a>数据范围</h5><p>1≤整数长度≤1051≤整数长度≤105</p><h5 id="输入样例：-1"><a href="#输入样例：-1" class="headerlink" title="输入样例："></a>输入样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">32</span><br><span class="line">11</span><br></pre></td></tr></table></figure><h5 id="输出样例：-1"><a href="#输出样例：-1" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">21</span><br></pre></td></tr></table></figure><h5 id="分析：-1"><a href="#分析：-1" class="headerlink" title="分析："></a>分析：</h5><ol><li>A - B， 默认A&gt;B</li><li>若A&lt;B， 加个负号</li><li>sub函数中，需要注意借位的使用</li></ol><h5 id="Answer：-1"><a href="#Answer：-1" class="headerlink" title="Answer："></a>Answer：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 先比较位数</span></span><br><span class="line">    <span class="keyword">if</span> (A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>())</span><br><span class="line">        <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">// 比较大小</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] != B[i])</span><br><span class="line">        &#123;</span><br><span class="line">            c</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C = A - B</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, vector&lt;<span class="type">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">        <span class="comment">// 初始 t = 0</span></span><br><span class="line">        <span class="comment">// 此处先解决进位</span></span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) </span><br><span class="line">            t -= B[i];</span><br><span class="line">        <span class="comment">// t+10 防止借位后变成负数</span></span><br><span class="line">        C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 如果借位了</span></span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 若结果00x 要去0</span></span><br><span class="line">    <span class="comment">// 去掉前导 0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) &#123;</span><br><span class="line">        C.<span class="built_in">pop_back</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 比较长，故用字符串表示</span></span><br><span class="line">    string a, b;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A, B;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 假设 a = &quot;123456&quot;</span></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>); <span class="comment">// A = [6, 5,4,3,2,1]</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = <span class="built_in">sub</span>(A, B);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">auto</span> C = <span class="built_in">sub</span>(B, A);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AcWing-793-高精度乘法"><a href="#AcWing-793-高精度乘法" class="headerlink" title="AcWing 793. 高精度乘法"></a>AcWing 793. 高精度乘法</h4><p>给定两个非负整数（不含前导 00） AA 和 BB，请你计算 A×BA×B 的值。</p><h5 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h5><p>共两行，第一行包含整数 AA，第二行包含整数 BB。</p><h5 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h5><p>共一行，包含 A×BA×B 的值。</p><h5 id="数据范围-2"><a href="#数据范围-2" class="headerlink" title="数据范围"></a>数据范围</h5><p>1≤A的长度≤1000001≤A的长度≤100000,<br>0≤B≤100000≤B≤10000</p><h5 id="输入样例：-2"><a href="#输入样例：-2" class="headerlink" title="输入样例："></a>输入样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure><h5 id="输出样例：-2"><a href="#输出样例：-2" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure><h5 id="Answer：-2"><a href="#Answer：-2" class="headerlink" title="Answer："></a>Answer：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">mul</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        <span class="comment">// 保留个位</span></span><br><span class="line">        C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">        <span class="comment">// 保留进位</span></span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 需要考虑前导0,若b = 0， 有可能出现前导0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">mul</span>(A, b);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AcWing-794-高精度除法"><a href="#AcWing-794-高精度除法" class="headerlink" title="AcWing 794. 高精度除法"></a>AcWing 794. 高精度除法</h4><p>给定两个非负整数（不含前导 0） A，BA，B，请你计算 A&#x2F;B的商和余数。</p><h5 id="输入格式-3"><a href="#输入格式-3" class="headerlink" title="输入格式"></a>输入格式</h5><p>共两行，第一行包含整数 A，第二行包含整数 B。</p><h5 id="输出格式-3"><a href="#输出格式-3" class="headerlink" title="输出格式"></a>输出格式</h5><p>共两行，第一行输出所求的商，第二行输出所求余数。</p><h5 id="数据范围-3"><a href="#数据范围-3" class="headerlink" title="数据范围"></a>数据范围</h5><p>1≤A的长度≤100000,<br>1≤B≤100001≤B≤10000,<br>B 一定不为 0</p><h5 id="输入样例：-3"><a href="#输入样例：-3" class="headerlink" title="输入样例："></a>输入样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">7</span><br><span class="line">2</span><br></pre></td></tr></table></figure><h5 id="输出样例：-3"><a href="#输出样例：-3" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br></pre></td></tr></table></figure><h5 id="Answer"><a href="#Answer" class="headerlink" title="Answer:"></a>Answer:</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C = A / b ... r</span></span><br><span class="line"><span class="comment">// r需要引用，因为有改变。</span></span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">div</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;A, <span class="type">int</span> b, <span class="type">int</span> &amp;r)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 这个是 商</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 除法操作</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --)&#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 最后还是倒着输出的</span></span><br><span class="line">    <span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="comment">// 去掉前导0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    string a;</span><br><span class="line">    <span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line"></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) </span><br><span class="line">        A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = <span class="built_in">div</span>(A, b, r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i --) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; endl &lt;&lt; r &lt;&lt; endl;</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前缀和与差分"><a href="#前缀和与差分" class="headerlink" title="前缀和与差分"></a>前缀和与差分</h3><h4 id="AcWing-795-前缀和"><a href="#AcWing-795-前缀和" class="headerlink" title="AcWing  795. 前缀和"></a>AcWing  795. 前缀和</h4><p>输入一个长度为 n 的整数序列。</p><p>接下来再输入 mm 个询问，每个询问输入一对 l,r。</p><p>对于每个询问，输出原序列中从第 l 个数到第 r 个数的和。</p><h5 id="输入格式-4"><a href="#输入格式-4" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含两个整数 n 和 m。</p><p>第二行包含 n 个整数，表示整数数列。</p><p>接下来 m 行，每行包含两个整数 l 和 r，表示一个询问的区间范围。</p><h5 id="输出格式-4"><a href="#输出格式-4" class="headerlink" title="输出格式"></a>输出格式</h5><p>共 m 行，每行输出一个询问的结果。</p><h5 id="数据范围-4"><a href="#数据范围-4" class="headerlink" title="数据范围"></a>数据范围</h5><p>1≤l≤r≤n,<br>1≤n,m≤100000,<br>−1000≤数列中元素的值≤1000</p><h5 id="输入样例：-4"><a href="#输入样例：-4" class="headerlink" title="输入样例："></a>输入样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">5 3</span><br><span class="line">2 1 3 6 4</span><br><span class="line">1 2</span><br><span class="line">1 3</span><br><span class="line">2 4</span><br></pre></td></tr></table></figure><h5 id="输出样例：-4"><a href="#输出样例：-4" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h5 id="Answer：-3"><a href="#Answer：-3" class="headerlink" title="Answer："></a>Answer：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 前缀和的初始化</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (m --)&#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AcWing-796-子矩阵的和"><a href="#AcWing-796-子矩阵的和" class="headerlink" title="AcWing 796. 子矩阵的和"></a>AcWing 796. 子矩阵的和</h4><p>输入一个 nn 行 mm 列的整数矩阵，再输入 qq 个询问，每个询问包含四个整数 x1,y1,x2,y2x1,y1,x2,y2，表示一个子矩阵的左上角坐标和右下角坐标。</p><p>对于每个询问输出子矩阵中所有数的和。</p><h5 id="输入格式-5"><a href="#输入格式-5" class="headerlink" title="输入格式"></a>输入格式</h5><p>第一行包含三个整数 n，m，qn，m，q。</p><p>接下来 nn 行，每行包含 mm 个整数，表示整数矩阵。</p><p>接下来 qq 行，每行包含四个整数 x1,y1,x2,y2x1,y1,x2,y2，表示一组询问。</p><h5 id="输出格式-5"><a href="#输出格式-5" class="headerlink" title="输出格式"></a>输出格式</h5><p>共 qq 行，每行输出一个询问的结果。</p><h5 id="数据范围-5"><a href="#数据范围-5" class="headerlink" title="数据范围"></a>数据范围</h5><p>1≤n,m≤10001≤n,m≤1000,<br>1≤q≤2000001≤q≤200000,<br>1≤x1≤x2≤n1≤x1≤x2≤n,<br>1≤y1≤y2≤m1≤y1≤y2≤m,<br>−1000≤矩阵内元素的值≤1000−1000≤矩阵内元素的值≤1000</p><h5 id="输入样例：-5"><a href="#输入样例：-5" class="headerlink" title="输入样例："></a>输入样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 4 3</span><br><span class="line">1 7 2 4</span><br><span class="line">3 6 2 8</span><br><span class="line">2 1 2 3</span><br><span class="line">1 1 2 2</span><br><span class="line">2 1 3 4</span><br><span class="line">1 3 3 4</span><br></pre></td></tr></table></figure><h5 id="输出样例：-5"><a href="#输出样例：-5" class="headerlink" title="输出样例："></a>输出样例：</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">17</span><br><span class="line">27</span><br><span class="line">21</span><br></pre></td></tr></table></figure><h5 id="解析："><a href="#解析：" class="headerlink" title="解析："></a>解析：</h5><h5 id="Answer：-4"><a href="#Answer：-4" class="headerlink" title="Answer："></a>Answer：</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> s[N][N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d,&quot;</span>, &amp;n, &amp;m, &amp;q);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输入数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;s[i][j]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算二维版的“前缀和”</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i ++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j ++)&#123;</span><br><span class="line">            s[i][j] += s[i - <span class="number">1</span>][j] + s[i][j - <span class="number">1</span>] - s[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (q --)&#123;</span><br><span class="line">        <span class="type">int</span> x1, x2, y1, y2;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d%d&quot;</span>, &amp;x1, &amp;y1, &amp;x2, &amp;y2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, s[x2][y2] - s[x1 - <span class="number">1</span>][y2] - s[x2][y1 - <span class="number">1</span>] + s[x1 - <span class="number">1</span>][y1 - <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双指针算法"><a href="#双指针算法" class="headerlink" title="双指针算法"></a>双指针算法</h3><h4 id="AcWing-799-最长连续不重复子序列"><a href="#AcWing-799-最长连续不重复子序列" class="headerlink" title="AcWing 799. 最长连续不重复子序列"></a>AcWing 799. 最长连续不重复子序列</h4><h4 id="AcWing-800-数组元素的目标和"><a href="#AcWing-800-数组元素的目标和" class="headerlink" title="AcWing 800. 数组元素的目标和"></a>AcWing 800. 数组元素的目标和</h4><p>给定：升序数组A[] B[]， 目标值x</p><p>要求：A[i] + B[j] &#x3D; x 的数对 (i, j)</p><h5 id="暴力：-TLE"><a href="#暴力：-TLE" class="headerlink" title="暴力：(TLE)"></a>暴力：(TLE)</h5><p>遍历A、B，当A[i] &lt; x 的时候，寻找B[j]。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m, x;</span><br><span class="line"><span class="type">int</span> A[N], B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; A[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        cin &gt;&gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process</span></span><br><span class="line">    <span class="type">int</span> resi = <span class="number">0</span>, resj = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> flag = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (A[i] &lt;= x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (B[j] &lt;= x)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (A[i] + B[j] == x)</span><br><span class="line">                    &#123;</span><br><span class="line">                        resi = i;</span><br><span class="line">                        resj = j;</span><br><span class="line">                        flag = <span class="literal">false</span>;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    cout &lt;&lt; resi &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; resj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="双指针-Accepted"><a href="#双指针-Accepted" class="headerlink" title="双指针 Accepted"></a>双指针 Accepted</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> n, m, x;</span><br><span class="line"><span class="type">int</span> A[N], B[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 输入数据</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; x;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; A[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        cin &gt;&gt; B[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process</span></span><br><span class="line">     <span class="comment">// 双指针</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, j = m - <span class="number">1</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="keyword">while</span> (j &gt;= <span class="number">0</span> &amp;&amp; A[i] + B [j] &gt; x) j --;</span><br><span class="line">        <span class="keyword">if</span> (A[i] + B[j] == x) &#123;</span><br><span class="line">            cout &lt;&lt; i &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 输出</span></span><br><span class="line">    <span class="comment">// cout &lt;&lt; resi &lt;&lt; &quot; &quot; &lt;&lt; resj;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AcWing2816-判断子序列"><a href="#AcWing2816-判断子序列" class="headerlink" title="AcWing2816. 判断子序列"></a>AcWing2816. 判断子序列</h4><p>要求：判断a[] 是否是b[] 的子序列</p><p>子序列指序列的一部分项按<strong>原有次序排列</strong>而得的序列，例如序列 {a1,a3,a5} 是序列 {a1,a2,a3,a4,a5}的一个子序列。</p><p>WA：</p><p>错误的思路：</p><ol><li><p>开个数组c[i] 记录匹配情况，初始化为0，随后判断c[i]中是否全为1，如果是就输出yes</p></li><li><p>存在问题：无法按顺序判断子序列</p><p>如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 5</span><br><span class="line">1 3 5</span><br><span class="line">5 4 3 2 1</span><br><span class="line"></span><br><span class="line">My Answer: Yes</span><br><span class="line">Standard Answer: No </span><br><span class="line">此方法仅考虑存在性而没有考虑顺序。</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process</span></span><br><span class="line">    <span class="comment">// 开一个c[]存结果</span></span><br><span class="line">    <span class="type">int</span> c[n] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (a[i] == b[j])&#123;</span><br><span class="line">                c[i] = <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// output</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (c[i] == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>双指针AC</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// input</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i++)</span><br><span class="line">        cin &gt;&gt; b[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// process</span></span><br><span class="line">   <span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; m)</span><br><span class="line">   &#123;</span><br><span class="line">        <span class="keyword">if</span> (a[i] == b[j]) i ++;</span><br><span class="line">        j ++;</span><br><span class="line">        </span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (i == n) cout &lt;&lt; <span class="string">&quot;Yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">   <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>离散化的本质是建立了一段数列到自然数之间的映射关系（value -&gt; index)，将<code>自然数key</code>映射为它在<code>数组中的索引index</code>，通过建立新索引，来缩小目标区间，使得可以进行一系列连续数组可以进行的操作比如二分，前缀和等…</p><p>离散化首先要排序去重：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 排序： <span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>())</span><br><span class="line"><span class="number">2.</span> 去重： alls.<span class="built_in">earse</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>())</span><br></pre></td></tr></table></figure><p>unique()原理：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;::<span class="function">iterator <span class="title">unique</span><span class="params">(vector&lt;<span class="type">int</span>&gt; &amp;a)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; a.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">        <span class="comment">// 1. 第一个元素</span></span><br><span class="line">        <span class="comment">// 2. 该元素不等于前一个元素</span></span><br><span class="line">        <span class="comment">// 满足1 or 2的存入数组里</span></span><br><span class="line">        <span class="keyword">if</span> ( !i || a[i] != a[i - <span class="number">1</span>])</span><br><span class="line">            a[j ++] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回前 j 个不重复元素的下标</span></span><br><span class="line">    <span class="keyword">return</span> a.<span class="built_in">begin</span>() + j;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="AcWing802-区间和"><a href="#AcWing802-区间和" class="headerlink" title="AcWing802_区间和"></a>AcWing802_区间和</h4><p>假定有一个无限长的数轴，数轴上每个坐标上的数都是 0。</p><p>现在，我们首先进行 n 次操作，每次操作将某一位置 x 上的数加 cc。</p><p>接下来，进行 mm 次询问，每个询问包含两个整数 l 和 r，你需要求出在区间 [l,r] 之间的所有数的和。</p><p>输入格式</p><p>第一行包含两个整数 n 和 m。</p><p>接下来 n 行，每行包含两个整数 x 和 c。</p><p>再接下来 m 行，每行包含两个整数 l 和 r。</p><p>输出格式</p><p>共 m 行，每行输出一个询问中所求的区间内数字和。</p><p>数据范围</p><p>−109≤x≤109,<br>1≤n,m≤105,<br>−109≤l≤r≤109,<br>−10000≤c≤10000</p><p>输入样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">3 3</span><br><span class="line">1 2</span><br><span class="line">3 6</span><br><span class="line">7 5</span><br><span class="line">1 3</span><br><span class="line">4 6</span><br><span class="line">7 8</span><br></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">8</span><br><span class="line">0</span><br><span class="line">5</span><br></pre></td></tr></table></figure><h5 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h5><p>由于本题可能有多组数据是针对同一个数组下标操作的，因此我们可以将所有用到的数组下标装在一个下标容器<code>alls</code>内去重，然后再逐一为相同的数组下标增加数值c，再通过对应前缀和相减求得区间<code>l~r</code>之间的数的值</p><p><code>const int N = 300010</code> &#x3D;&gt;  n + 2m 最大可能值</p><h5 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">300010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> a[N], s[N];</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="type">int</span>&gt; alls;  <span class="comment">//存入下标容器</span></span><br><span class="line">vector&lt;PII&gt; add, query;  <span class="comment">//add增加容器，存入对应下标和增加的值的大小</span></span><br><span class="line"><span class="comment">//query存入需要计算下标区间和的容器</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = alls.<span class="built_in">size</span>() - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//查找大于等于x的最小的值的下标</span></span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (alls[mid] &gt;= x) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//因为使用前缀和，其下标要+1可以不考虑边界问题</span></span><br><span class="line">    <span class="keyword">return</span> r + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x, c;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">        add.<span class="built_in">push_back</span>(&#123;x, c&#125;);<span class="comment">//存入下标即对应的数值c</span></span><br><span class="line"></span><br><span class="line">        alls.<span class="built_in">push_back</span>(x);<span class="comment">//存入数组下标x=add.first</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        query.<span class="built_in">push_back</span>(&#123;l, r&#125;);<span class="comment">//存入要求的区间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//存入区间左右下标</span></span><br><span class="line">        alls.<span class="built_in">push_back</span>(l);</span><br><span class="line">        alls.<span class="built_in">push_back</span>(r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 区间去重</span></span><br><span class="line">    <span class="built_in">sort</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>());</span><br><span class="line">    alls.<span class="built_in">erase</span>(<span class="built_in">unique</span>(alls.<span class="built_in">begin</span>(), alls.<span class="built_in">end</span>()), alls.<span class="built_in">end</span>());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理插入</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : add)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> x = <span class="built_in">find</span>(item.first);<span class="comment">//将add容器的add.secend值存入数组a[]当中，</span></span><br><span class="line">        a[x] += item.second;<span class="comment">//在去重之后的下标集合alls内寻找对应的下标并添加数值</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 预处理前缀和</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= alls.<span class="built_in">size</span>(); i ++ ) s[i] = s[i - <span class="number">1</span>] + a[i];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理询问</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> item : query)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l = <span class="built_in">find</span>(item.first), r = <span class="built_in">find</span>(item.second);<span class="comment">//在下标容器中查找对应的左右两端[l~r]下标，然后通过下标得到前缀和相减再得到区间a[l~r]的和</span></span><br><span class="line">        cout &lt;&lt; s[r] - s[l - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="区间合并"><a href="#区间合并" class="headerlink" title="区间合并"></a>区间合并</h3><p>有交集的区间合并为一个区间，返回合并之后的区间个数</p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>两个区间a, b的关系：</p><ol><li>在内部</li><li>有交集</li><li>边界重合</li><li>没有共同部分</li></ol><p>处理过程：</p><ol><li>按区间左端点排序</li><li>初始化start, end 为负无穷</li><li>区间有重合部分合并：左端点不变，更新右端点。</li><li></li></ol><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>给定 n 个区间 $[l_i,r_i]$，要求合并所有有交集的区间。</p><p>注意如果在端点处相交，也算有交集。</p><p>输出合并完成后的区间个数。</p><p>例如：[1,3] 和 [2,6] 可以合并为一个区间 [1, 6]。</p><h4 id="输入格式-6"><a href="#输入格式-6" class="headerlink" title="输入格式"></a>输入格式</h4><p>第一行包含整数 n。</p><p>接下来 n 行，每行包含两个整数 l 和 r。</p><h4 id="输出格式-6"><a href="#输出格式-6" class="headerlink" title="输出格式"></a>输出格式</h4><p>共一行，包含一个整数，表示合并区间完成后的区间个数。</p><h4 id="数据范围-6"><a href="#数据范围-6" class="headerlink" title="数据范围"></a>数据范围</h4><p>1≤n≤100000,<br>−109≤$l_i$≤$r_i$≤109</p><h4 id="输入样例：-6"><a href="#输入样例：-6" class="headerlink" title="输入样例："></a>输入样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;5</span><br><span class="line">&gt;1 2</span><br><span class="line">&gt;2 4</span><br><span class="line">&gt;5 6</span><br><span class="line">&gt;7 8</span><br><span class="line">&gt;7 9</span><br></pre></td></tr></table></figure><h4 id="输出样例：-6"><a href="#输出样例：-6" class="headerlink" title="输出样例："></a>输出样例：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;3</span><br></pre></td></tr></table></figure></blockquote><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; PII;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;PII&gt; segs;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(vector&lt;PII&gt; &amp;segs)</span></span>&#123;</span><br><span class="line">    vector&lt;PII&gt; res; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sort</span>(segs.<span class="built_in">begin</span>(), segs.<span class="built_in">end</span>());  <span class="comment">// 按照左端点排序</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设初始都为无穷小</span></span><br><span class="line">    <span class="type">int</span> st = <span class="number">-2e9</span>, ed = <span class="number">-2e9</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> seg : segs)&#123;</span><br><span class="line">        <span class="keyword">if</span> (ed &lt; seg.first)&#123; <span class="comment">// 情况1：在内部</span></span><br><span class="line">            <span class="keyword">if</span> (ed != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;); <span class="comment">// 若ed非负无穷，可更新区间。</span></span><br><span class="line">            st = seg.first, ed = seg.second;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> ed = <span class="built_in">max</span>(ed, seg.second); <span class="comment">// 情况2：仅仅是有交集</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 情况3：没有重合的位置，会更新到下一个st中</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 特判最后一个区间</span></span><br><span class="line">    <span class="keyword">if</span> (st != <span class="number">-2e9</span>) res.<span class="built_in">push_back</span>(&#123;st, ed&#125;);</span><br><span class="line"></span><br><span class="line">    segs = res;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i ++)&#123;</span><br><span class="line">        <span class="type">int</span> l, r;</span><br><span class="line">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">        segs.<span class="built_in">push_back</span>(&#123;l, r&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">merge</span>(segs);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; segs.<span class="built_in">size</span>() &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;高精度&quot;&gt;&lt;a href=&quot;#高精度&quot; class=&quot;headerlink&quot; title=&quot;高精度&quot;&gt;&lt;/a&gt;高精度&lt;/h3&gt;&lt;h4 id=&quot;Acwing-791-高精度加法&quot;&gt;&lt;a href=&quot;#Acwing-791-高精度加法&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="算法" scheme="https://www.bebella.cc/categories/%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="编程" scheme="https://www.bebella.cc/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="AcWing" scheme="https://www.bebella.cc/tags/AcWing/"/>
    
  </entry>
  
  <entry>
    <title>计算机英语期末</title>
    <link href="https://www.bebella.cc/2022/12/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E6%9C%9F%E6%9C%AB/"/>
    <id>https://www.bebella.cc/2022/12/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%8B%B1%E8%AF%AD%E6%9C%9F%E6%9C%AB/</id>
    <published>2022-12-19T10:32:56.000Z</published>
    <updated>2023-07-01T13:51:20.957Z</updated>
    
    <content type="html"><![CDATA[<h1 id="week-02"><a href="#week-02" class="headerlink" title="week 02"></a>week 02</h1><p>IT: information technology</p><p>the use of computer and software to manage information.</p><p>prefix:</p><ul><li>multimedia</li><li>minibus</li><li>superhero</li><li>internet</li><li>microsoft</li></ul><p>It department has Chief Information Officer (CIO)</p><p>It department should be responsible for:</p><ul><li>storing information</li><li>protecting information</li><li>processing information</li><li>transmitting information</li><li>retrieving information</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;week-02&quot;&gt;&lt;a href=&quot;#week-02&quot; class=&quot;headerlink&quot; title=&quot;week 02&quot;&gt;&lt;/a&gt;week 02&lt;/h1&gt;&lt;p&gt;IT: information technology&lt;/p&gt;
&lt;p&gt;the use of compu</summary>
      
    
    
    
    <category term="英语" scheme="https://www.bebella.cc/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    <category term="课程作业" scheme="https://www.bebella.cc/categories/%E8%8B%B1%E8%AF%AD/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    
  </entry>
  
  <entry>
    <title>【spring】（11）注解</title>
    <link href="https://www.bebella.cc/2022/11/24/%E3%80%90spring%E3%80%91%EF%BC%8811%EF%BC%89%E6%B3%A8%E8%A7%A3/"/>
    <id>https://www.bebella.cc/2022/11/24/%E3%80%90spring%E3%80%91%EF%BC%8811%EF%BC%89%E6%B3%A8%E8%A7%A3/</id>
    <published>2022-11-24T05:06:16.000Z</published>
    <updated>2023-08-22T14:45:27.806Z</updated>
    
    <content type="html"><![CDATA[<p>Spring对注解支持的版本历程:</p><ul><li>2.0版开始支持注解</li><li>2.5版注解功能趋于完善</li><li>3.0版支持纯注解开发</li></ul><h2 id="1-IOC-x2F-DI注解开发"><a href="#1-IOC-x2F-DI注解开发" class="headerlink" title="1. IOC&#x2F;DI注解开发"></a>1. IOC&#x2F;DI注解开发</h2><h3 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h3><ul><li>创建一个maven</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Spring对注解支持的版本历程:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.0版开始支持注解&lt;/li&gt;
&lt;li&gt;2.5版注解功能趋于完善&lt;/li&gt;
&lt;li&gt;3.0版支持纯注解开发&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-IOC-x2F-DI注解开发&quot;&gt;&lt;a href=&quot;#1-IOC</summary>
      
    
    
    
    <category term="课程作业" scheme="https://www.bebella.cc/categories/%E8%AF%BE%E7%A8%8B%E4%BD%9C%E4%B8%9A/"/>
    
    
    <category term="软工实践" scheme="https://www.bebella.cc/tags/%E8%BD%AF%E5%B7%A5%E5%AE%9E%E8%B7%B5/"/>
    
    <category term="后端" scheme="https://www.bebella.cc/tags/%E5%90%8E%E7%AB%AF/"/>
    
  </entry>
  
</feed>
